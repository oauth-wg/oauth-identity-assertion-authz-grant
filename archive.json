{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-10-16T00:02:42.676791+00:00",
  "repo": "oauth-wg/oauth-identity-assertion-authz-grant",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "ietf-124",
      "description": "Publication deadline Oct 20, 2025",
      "color": "0dd6e5"
    },
    {
      "name": "ietf-125",
      "description": "",
      "color": "52f6d3"
    }
  ],
  "issues": [
    {
      "number": 3,
      "id": "I_kwDOKv5r-s6C6zv7",
      "title": "Pairwise identifiers",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/3",
      "state": "CLOSED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "The subject identifier between apps doesn't need to be the same. Mention how the IdP can use a different subject identifier targeted at the AS. ",
      "createdAt": "2024-03-20T01:38:36Z",
      "updatedAt": "2024-07-02T20:27:31Z",
      "closedAt": "2024-07-02T20:27:31Z",
      "comments": [
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "sub - The \"User ID at the IdP\" can be changed to \"subject identifier\" recognized by AS",
          "createdAt": "2024-06-11T19:10:47Z",
          "updatedAt": "2024-06-20T17:01:54Z"
        },
        {
          "author": "randomstuff",
          "authorAssociation": "NONE",
          "body": "> sub - The User ID at the IdP can be cahnged to subject identifier recognized by AS\r\n\r\nIt might be worth discussing how the IdP could do this mapping.",
          "createdAt": "2024-06-17T21:36:18Z",
          "updatedAt": "2024-06-17T21:36:18Z"
        },
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "I think this is an implementation detail, but because the IdP is used by both RS and Client, it should understand the sub claims that the Resource Server's AS expects. ",
          "createdAt": "2024-06-20T17:02:04Z",
          "updatedAt": "2024-06-20T17:02:04Z"
        },
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "In typical SSO, an enterprise IdP might already send different subject identifiers for the same user to different apps that are signing in. This note is just to add a sentence that describes this, and also to make it clear that we are *not* trying to change this behavior to require that all user IDs are identical across both apps in this flow.",
          "createdAt": "2024-06-20T17:05:35Z",
          "updatedAt": "2024-06-20T17:05:35Z"
        },
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "This was updated here and now no longer makes it sound like the `sub` value is the same across everything: https://github.com/aaronpk/draft-parecki-oauth-identity-assertion-authz-grant/commit/66a511fbd7695e214433ff4f5c0ec7b87c6af461",
          "createdAt": "2024-07-02T20:27:31Z",
          "updatedAt": "2024-07-02T20:27:31Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOKv5r-s6C6z3D",
      "title": "Mention that this profile assumes there is a single IdP that is trusted by both apps",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/4",
      "state": "CLOSED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This is mentioned in the appendix, but should be mentioned earlier. This also simplifies pairwise identifiers in #3.",
      "createdAt": "2024-03-20T01:38:52Z",
      "updatedAt": "2024-07-02T20:18:29Z",
      "closedAt": "2024-07-02T20:18:29Z",
      "comments": []
    },
    {
      "number": 6,
      "id": "I_kwDOKv5r-s6Dbsyk",
      "title": "Identity Assertion Authz Grant allows broadening the scope",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/6",
      "state": "CLOSED",
      "author": "obfuscoder",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I followed the presentation at the IETF 119 for this topic. The profile describes how an ID Token is used to get a JWT Authorization Grant and then to get an Access Token for that JWT Authorization Grant. The scope can be defined by the client when requesting the access token.\r\n\r\nAs the JWT Authorization Grant profile is designed to allow interop across several domains, each AS in the participating domain will support creating authorization grant JWTs as well as accepting authorization grant JWTs to issue access tokens.\r\n\r\nUsually a client receives an access token alongside the ID Token and the client can use Token Exchange to get additional access tokens with equal or narrowed down scope.\r\n\r\nThe ID Token does not contain any scope. So even if a client only received an Access Token with a specific narrow scope, the client could abuse this grant by asking AS of domain A for an authorization grant JWT based on the Id Token and then use this authz grant JWT at the AS of domain A again to obtain a new access token with arbitrary scope (up to what is allowed for the client as per policy).\r\n\r\nAlthough this could be prohibited by the AS not accepting authorization grant JWTs it issued itself, the client could request the authorization grant JWT from the AS of domain B with just a couple more steps.\r\n\r\nGranted, this may not be relevant for the enterprise environment the JWT authorization grant profile is meant for as the End-User is usually not asked for giving consent to the scope requested by clients and instead the allowed scope in defined by policies within the AS configs. However, I'd like to ask if this is something worth to consider.",
      "createdAt": "2024-03-25T07:25:11Z",
      "updatedAt": "2025-06-20T23:07:33Z",
      "closedAt": "2025-06-20T23:07:33Z",
      "comments": [
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "I agree there should be a reiteration that this draft is intended for cross-domain use cases only, or an explicit mention that the IDP Authorization Server should not accept ID-JAGs issued from itself (or where the `resource` in the request is the requesting Client's token endpoint, although as you mentioned, in the enterprise use case some policies should prevent this)",
          "createdAt": "2024-06-10T15:06:05Z",
          "updatedAt": "2024-06-10T15:06:05Z"
        },
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "I added a brief section in the security considerations about this. It could probably use some more filling out.",
          "createdAt": "2024-07-02T20:12:05Z",
          "updatedAt": "2024-07-02T20:12:05Z"
        },
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "At Dean's suggestion, I changed this to \"MUST NOT\".",
          "createdAt": "2025-06-20T23:07:33Z",
          "updatedAt": "2025-06-20T23:07:33Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOKv5r-s6IIlrx",
      "title": "Add mention of refresh_token field in token response",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/7",
      "state": "CLOSED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Token Exchange already defines the refresh_token field in the token response, mention why that is useful and when someone might want to do that.",
      "createdAt": "2024-05-07T18:15:40Z",
      "updatedAt": "2024-06-11T19:07:26Z",
      "closedAt": "2024-06-11T19:07:26Z",
      "comments": [
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "we aren't planning on returning a refresh token here anymore",
          "createdAt": "2024-06-11T19:07:26Z",
          "updatedAt": "2024-06-11T19:07:26Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOKv5r-s6IIoUj",
      "title": "Give an example of the refresh token flow",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/8",
      "state": "CLOSED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Input to token exchange is:\r\n\r\n* `subject_token=<refresh token>`\r\n* `subject_token_type=urn:ietf:params:oauth:token-type:refresh_token`\r\n\r\nResponse includes a JWT as well as optional new refresh token\r\n",
      "createdAt": "2024-05-07T18:22:53Z",
      "updatedAt": "2024-06-11T19:06:14Z",
      "closedAt": "2024-06-11T19:06:14Z",
      "comments": [
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "Instead we'll recommend using the refresh token to get a new ID token.",
          "createdAt": "2024-06-11T19:06:14Z",
          "updatedAt": "2024-06-11T19:06:14Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOKv5r-s6IhbRH",
      "title": "Note about SAML user identifiers",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/9",
      "state": "CLOSED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Add a note:\r\n\r\nThe IdP needs to ensure there is an IdP-recognizable value to identify the user in the SAML assertion. For example if the IdP transforms the user ID to something specific to the app as the nameID, it needs to also include the actual unique user ID as a custom claim that it can use to identify the user when the SAML assertion is passed back to the IdP.",
      "createdAt": "2024-05-10T22:02:06Z",
      "updatedAt": "2024-06-11T19:05:57Z",
      "closedAt": "2024-06-11T19:05:57Z",
      "comments": [
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "Going to do this a different way, recommending exchanging the SAML assertion for an ID token first.",
          "createdAt": "2024-06-11T19:05:57Z",
          "updatedAt": "2024-06-11T19:05:57Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOKv5r-s6L38zs",
      "title": "Update based on decisions about SAML and refresh token usage",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/10",
      "state": "CLOSED",
      "author": "sdesen",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "- Close #9 \r\n- Close #8 \r\n- Close #7 \r\n- Remove option to use SAML assertion as the subject_token in the exchange\r\n- Make a note about obtaining ID tokens from token exchange after authenticating with SAML",
      "createdAt": "2024-06-11T15:17:31Z",
      "updatedAt": "2024-06-11T19:07:33Z",
      "closedAt": "2024-06-11T19:07:33Z",
      "comments": []
    },
    {
      "number": 12,
      "id": "I_kwDOKv5r-s6L5g5t",
      "title": "Add to security concerns section",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/12",
      "state": "CLOSED",
      "author": "sdesen",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "- #6 \r\n- and other threat models considerations\r\n- extra considerations for scopes and scope validation",
      "createdAt": "2024-06-11T19:12:41Z",
      "updatedAt": "2025-10-10T21:24:22Z",
      "closedAt": "2025-10-10T21:24:22Z",
      "comments": [
        {
          "author": "kamronbatman",
          "authorAssociation": "CONTRIBUTOR",
          "body": "* We should add some kind of verbiage similar to [RFC 9470 Section 9](https://www.rfc-editor.org/rfc/rfc9470.html#section-9) regarding authentication/sessions.\r\n* We should probably add some recommendation about the lifetime of the jag token to the effect of that the token should only live as long as necessary to exchange. This is reinforced by the idea that an oauth id-token refresh token can be used to get an unexpired id token to exchange for another id jag. ",
          "createdAt": "2024-07-09T18:45:32Z",
          "updatedAt": "2024-07-09T18:46:40Z"
        },
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "This was an old issue that I believe was indirectly addressed. Closing.",
          "createdAt": "2025-10-10T21:24:22Z",
          "updatedAt": "2025-10-10T21:24:22Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOKv5r-s6MkWCT",
      "title": "Why don't the IdP requests the access token from the AS?",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/13",
      "state": "OPEN",
      "author": "randomstuff",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The scenario described works as follows:\r\n\r\n1. client obtains ID token;\r\n2. client exchanges ID token with IdP against JAG;\r\n3. client requests AT from AS using JAG as an assertion;\r\n4. client uses AT on the RS.\r\n\r\nA downside of this approach is that in step 3, the client must be registered on the AS.\r\n\r\nWhy wouldn't/couldn't the AS take care of step 3?\r\n\r\nThis would make the process simpler for the client:\r\n\r\n* the client does not need to know that the RS is associated with another domain;\r\n* the client does not need to know that the AS exists at all;\r\n* the client therefore does not need to have credentials for the AS.\r\n\r\nThe fact that the RS is in another domain would be transparent for the client. You could have one deployment where the RS in in the same domain and another deployment where is is in another domain without having to change the client logic.\r\n\r\nModified scenario:\r\n\r\n1. client obtains ID token;\r\n2. client exchange ID token with IdP against AT;\r\n  a. in order to obtain the AT, the AS might need to generate an assertion and send it to the AS\r\n4. client uses AT on the RS.\r\n\r\nOne downside is that from the point of view, the token are issued to the IdP but surely this can be worked-around with some extension.\r\n",
      "createdAt": "2024-06-17T21:58:37Z",
      "updatedAt": "2024-06-20T15:08:10Z",
      "closedAt": null,
      "comments": [
        {
          "author": "kamronbatman",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The approach we took (which is malleable, as we want to build a simple and reusable flow with the least assumptions), is to have the least amount of burden on both the client (requesting application) and the RS AS. In doing that,  step 3 is fine because right now clients already are registered with the RS AS to request tokens directly and facilitate SSO flows. We wanted to lean into that by shifting as much of the burden to the identity provider, especially since the identity provider has all of the information about the user/organization and their relationships.\r\n\r\nI do like the simplicity of the proposed modified scenario and I think we should continue hammering out details to see if this kind of approach could work.\r\n\r\nI think we also agree that front loading the `client_id` and `resource` identifiers for mapping on the identity provider is not ideal. Unfortunately, I also believe requiring the IdP to register a client on every RS AS to do a new on-behalf exchange is not ideal either, especially since that is technically 3rd party to the existing client and AS oAuth registration/trust relationship.",
          "createdAt": "2024-06-18T19:00:54Z",
          "updatedAt": "2024-06-18T19:02:53Z"
        },
        {
          "author": "randomstuff",
          "authorAssociation": "NONE",
          "body": "So I've been thinking (more/better) about my modified scenario. Some drawbacks are:\r\n\r\n* If a refresh_token was issued, the IdP now would be responsible for handling the token refresh request and forwarding it to the AS. I guess the IdP would have to store the original refresh token and send a new refresh token to the client.\r\n* The IdP would now be responsible for handling token revocations requests from the client. For the refresh token, the the approach from the previous point could be used but this is more complex for the access token.\r\n* The IdP would have to forward (and possibly filter/translate) many parameters such as scope, etc.\r\n* The client would not have the AS server metadata as it would not have a direct relationship with the AS.\r\n* DPoP forwarding would not work.",
          "createdAt": "2024-06-20T06:32:19Z",
          "updatedAt": "2024-06-20T06:35:12Z"
        },
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "If all AS responsibilities required for a typical OAuth consent flow were shifted to the IdP, then the IdP would become the AS for an intents and purposes, and then the Client would just make a typical request for an access token. No other steps would be needed. This spec is intended to leverage the common scenario where OAuth relationships exist and the AS may be independent of the IdP.\r\n\r\nHowever, I agree it makes sense to think about where changes can be made for the scenario where the relationship might not already exist, so very much appreciate this comment.\r\n\r\nFor this point:\r\n> the client does not need to know that the RS is associated with another domain;\r\n\r\nI am not sure I understand if this is true, because the client needs to make the resource request regardless from the RS.",
          "createdAt": "2024-06-20T15:04:17Z",
          "updatedAt": "2024-06-20T15:08:10Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "I_kwDOKv5r-s6MkdcS",
      "title": "Discuss the need for client_id mapping",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/14",
      "state": "OPEN",
      "author": "randomstuff",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 5.3 [Identity Assertion Authorization Grant JWT](https://datatracker.ietf.org/doc/html/draft-parecki-oauth-identity-assertion-authz-grant#name-identity-assertion-authoriz) says that the IdP should generate a Identity Assertion Authorization Grant JWT with:\r\n\r\n> client_id - Client ID as registered with the Resource Application's authorization server\r\n\r\nThis means that the IdP must use a mapping between the `client_id` at the IdP and the `client_id` at the AS. I don't believe this requirement is explicitly mentioned. Maybe this should be discussed.",
      "createdAt": "2024-06-17T22:19:13Z",
      "updatedAt": "2024-06-18T18:22:45Z",
      "closedAt": null,
      "comments": [
        {
          "author": "kamronbatman",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hey @randomstuff - you are right and this is on the docket to add explicitly as part of the formatting rewrite we will be doing soon. Specifically, the IdP will need to map the client authentication and `resource` (token endpoint) to the client's `client_id` at the Resource Server AS.",
          "createdAt": "2024-06-18T18:22:43Z",
          "updatedAt": "2024-06-18T18:22:43Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "I_kwDOKv5r-s6zDlEk",
      "title": "Add Authorization Server metadata to enable discovery of grant/token type.",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/16",
      "state": "CLOSED",
      "author": "mcguinness",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "[OAuth 2.0 Authorization Server Metadata](https://datatracker.ietf.org/doc/html/rfc8414) enables a client to discover capabilities of a given authorization server.   For example a client can fetch AS metadata to determine what endpoints, grant types, and scopes the AS supports and then dynamically construct a valid request for a supported granted type.  This enables the client to negotiate the right capabilities at runtime with an Authorization Server vs hard-coding assumptions for a given AS.\n\nA given client currently as no mechanism to discover\n\n- Whether an AS supports issuing `urn:ietf:params:oauth:token-type:id-jag` token type with Token Exchange\n- Whether an AS supports `oauth-id-jag+jwt` JWT as a valid JWT bearer grant type (`urn:ietf:params:oauth:grant-type:jwt-bearer`)\n\nUnfortunately [Token Exchange](https://www.rfc-editor.org/rfc/rfc8693)  doesn't define an authorization server metadata parameter for `requested_token_types_supported`  that could publish `urn:ietf:params:oauth:token-type:id-jag` as supported token type.  Adding the registration would enable clients to discover what token types they could request from a given AS\n\nSimilarly, the new draft revision of [JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants](https://www.ietf.org/archive/id/draft-jones-oauth-rfc7523bis-00.html)  also doesn't define an authorization server metadata parameter for what profiles are supported.  A new parameter such as `jwt_assertion_token_types_supported` would enable a client to know what assertion profiles an Authorization Supports such as `urn:ietf:params:oauth:token-type:id-jag`. \n\nWithout these additional values a client would need to hard-code support for this profile for a given Authorization Server.\n\n\n\n",
      "createdAt": "2025-04-18T05:53:52Z",
      "updatedAt": "2025-07-18T20:33:08Z",
      "closedAt": "2025-07-18T20:33:08Z",
      "comments": [
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "We need to treat these two questions separately. \n\nThe question of whether an AS (IdP) supports the \"ID JAG\" token exchange is necessary to avoid hard-coding support for this with out-of-band information.\n\nThe question of whether the JWT bearer grant type is supported is less helpful, because we actually need more information than that to do anything useful. The main feedback we've heard from implementers is they want to know whether an access token request will work with this flow for a given user. That is more than just whether the grant type is supported at the AS, because it also depends on the policies configured at the IdP. So what's actually needed is more of a \"list the applications I'll be able to get an access token using an ID-JAG from given the user and application context\", which looks more like a service call and less like a static discovery document.",
          "createdAt": "2025-06-27T15:53:21Z",
          "updatedAt": "2025-06-27T15:53:21Z"
        },
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "This PR on the Identity Chaining draft establishes the new `identity_chaining_requested_token_types_supported` property in AS metadata. I added a section to this draft for it. We'll address the second question about the JWT Bearer grant type later.",
          "createdAt": "2025-07-02T23:14:16Z",
          "updatedAt": "2025-07-02T23:14:16Z"
        },
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "Closing this in favor of discussing the specifics of the JWT Assertion Grant discovery question in #34",
          "createdAt": "2025-07-18T20:33:08Z",
          "updatedAt": "2025-07-18T20:33:08Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDOKv5r-s60RMm7",
      "title": "Client ID Registration",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/17",
      "state": "OPEN",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "\"client_id: : REQUIRED - An identifier of the client that this JWT was issued to, which MUST be recognized by the Resource Application's authorization server. For interoperability, the client identifier SHOULD be a client_id as defined in Section 4.3 {{RFC8693}}.\"\n\nIs the expectation for this draft that the same client_id is used and registered with different authorisation servers in different domains (in this case the IdP and Resource Application Authorization Server? This might get unwieldy at scale, especially in a world where a client may have to register with multiple authorisation servers.\n\nAs an alternative, some allowance for supporting multiple client_ids might be needed. This may be either through some kind of static mapping (also hard to maintain), or by allowing the client to specify additional client_ids for which the assertion may be used. \n\nAn additional point to clarify may be that the Resource Appliction's Authorization Server MUST verifiy that the client_id in the assertion match the client_id of the client presenting the assertion.",
      "createdAt": "2025-04-28T10:02:31Z",
      "updatedAt": "2025-06-20T23:06:16Z",
      "closedAt": null,
      "comments": [
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "No, there is no expectation that everyone shares the same client ID database, that's why I used the language \"recognized by the Resource Application's authorization server\".\n\nI hadn't considered multiple, that could be an option.",
          "createdAt": "2025-04-28T20:46:31Z",
          "updatedAt": "2025-04-28T20:46:31Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "NONE",
          "body": ">No, there is no expectation that everyone shares the same client ID database, that's why I used the language \"recognized by the Resource Application's authorization server\".\n\nSo, if I had a client that was registered with the IdP, and I used client_id_1 for that, I would not be expected to also use client_id_1 with the Resource applications authorization server, but could use client_id_2 with the Resource application's authorization server. How would the IdP know client_id_2 when including it in the JWT Authorization grant? There should probably be some guidance on implementation options (including a protocol option to allow the client to define what it wants as the client_id in the JWT - along with security considerations on that practice).",
          "createdAt": "2025-04-29T14:14:27Z",
          "updatedAt": "2025-04-29T14:14:27Z"
        },
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "> An additional point to clarify may be that the Resource Appliction's Authorization Server MUST verifiy that the client_id in the assertion match the client_id of the client presenting the assertion.\n\nThis is already noted here in section 6.1, was there more clarification you were thinking about:\n\n```\nThe client_id claim MUST identify the same client as the client authentication in the request.\n```\n\n> How would the IdP know client_id_2 when including it in the JWT Authorization grant? \n\nExcellent point that is also brought up in [this issue ](https://github.com/aaronpk/draft-parecki-oauth-identity-assertion-authz-grant/issues/14). Outside of recommending that the IdP maintain this mapping, we should prioritize thinking about other options or implementations that are more scalable....",
          "createdAt": "2025-04-29T17:17:33Z",
          "updatedAt": "2025-04-29T17:17:33Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "NONE",
          "body": "Cool - I am thinking of the kind of use cases we see with MCP and the potential application of this spec in that context. Static mapping is not going to be practical, so we need something more \"dynamic\" that doesn't require the IdP to know about client_id registration in the Resource Application's Authorization Server.\n\n>This is already noted here in section 6.1, was there more clarification you were thinking about:\n\nMissed it, great to see it is there already!\n\n",
          "createdAt": "2025-04-29T18:07:29Z",
          "updatedAt": "2025-04-29T18:07:29Z"
        },
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "Totally agree and its not necessarily info that Auth Servers may want on publicly available metadata endpoints, even thought ClientIDs are public..... need to give it more thought. curious on Araron's thoughts too. \n\nDCR could be an avenue to explore, but can't be the only solution.",
          "createdAt": "2025-04-29T20:36:03Z",
          "updatedAt": "2025-04-29T20:36:03Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "NONE",
          "body": "Agreed that we will need multiple solutions for client_id. ",
          "createdAt": "2025-05-02T09:53:22Z",
          "updatedAt": "2025-05-02T09:53:22Z"
        },
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "Is there any suggested changes needed here?",
          "createdAt": "2025-06-20T23:06:16Z",
          "updatedAt": "2025-06-20T23:06:16Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "I_kwDOKv5r-s61Mtvp",
      "title": "Nits in the draft",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/19",
      "state": "CLOSED",
      "author": "deansaxe",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "After reviewing the draft and discussing with @aaronpk last week, I have two nits to discuss to help clarify the language in the doc:\n\nSection 5.2 under **scope** states, \"This may be fewer scopes than the application requested\".  I believe the intent is that the scopes cannot grow in their impact.  This may be fewer in number, or it may be more scopes with a narrower set of authorized actions.  I suggest rewriting this slightly to clarify the intent is to constrain the scope, not the number of scopes in use.\n\nSection 7.3 states, \"The Identity Providers SHOULD NOT issue access tokens in response to an ID-JAG it issued itself\".  I agree with the intent, but stronger language is necessary.  I suggest changing this to \"MUST NOT\".\n\n",
      "createdAt": "2025-05-05T15:17:31Z",
      "updatedAt": "2025-06-20T23:08:07Z",
      "closedAt": "2025-06-20T23:08:07Z",
      "comments": [
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "> Section 5.2 under scope states, \"This may be fewer scopes than the application requested\".\n\nThanks, I'm going to copy the scope language from RFC6749 and use \"different\" instead of \"fewer\".\n\n> Section 7.3 states, \"The Identity Providers SHOULD NOT issue access tokens in response to an ID-JAG it issued itself\"\n\nAgreed, I don't see any harm in saying MUST NOT here. ",
          "createdAt": "2025-06-20T23:01:35Z",
          "updatedAt": "2025-06-20T23:01:35Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "I_kwDOKv5r-s63y15Z",
      "title": "Consider audience param in token ex request as the resource server indicator",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/20",
      "state": "CLOSED",
      "author": "sdesen",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "According to spec, audience param must not be used\nbut there is a valid case for it to indicate  resource server information in addition to the issuerURL in the resource request param\nFirst, other IdPs may have implementations where this is necessary and secondly can help disambiguate between resource severs served by 1 AS",
      "createdAt": "2025-05-22T14:20:18Z",
      "updatedAt": "2025-06-30T23:21:24Z",
      "closedAt": "2025-06-30T23:21:24Z",
      "comments": [
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "I tweaked the wording in af6a47f356ce5c0d76e32a30c59069870993a022 to clarify and leave open this possibility",
          "createdAt": "2025-05-22T15:24:10Z",
          "updatedAt": "2025-05-22T15:24:10Z"
        },
        {
          "author": "siacomuzzi",
          "authorAssociation": "NONE",
          "body": "So, in your example, where `https://acme.chat.example/` is the issuer URL of the Resource Application's Authorization Server, if this authorization server has multiple resource servers configured, should the token exchange request look like the following?\n\n```\n&resource=https://acme.chat.example/\n&audience=https://acme.chat.example/api/v3\n```\n\nAssuming that there are other resource servers (eg, `https://acme.chat.example/api/v1`, `https://acme.chat.example/api/v2`).",
          "createdAt": "2025-05-26T10:51:21Z",
          "updatedAt": "2025-05-26T10:52:39Z"
        },
        {
          "author": "siacomuzzi",
          "authorAssociation": "NONE",
          "body": "And how is that reflected in the [Identity Assertion Authorization Grant JWT](https://www.ietf.org/archive/id/draft-parecki-oauth-identity-assertion-authz-grant-03.html#name-identity-assertion-authoriz) payload?\n\nIn other words, which claim should the IdP use in the assertion to specify the resource server (`https://acme.chat.example/api/v3`)?",
          "createdAt": "2025-05-27T10:13:11Z",
          "updatedAt": "2025-05-27T10:17:57Z"
        },
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "This is resolved in #27 ",
          "createdAt": "2025-06-30T23:21:24Z",
          "updatedAt": "2025-06-30T23:21:24Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOKv5r-s68QGkz",
      "title": "How to identify the resource server",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/22",
      "state": "CLOSED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Problem: The token endpoint at the Authorization Server needs to know which resource to issue the token for. Currently only the Authorization Server is identified in the ID Assertion JWT.\n\nThis is the meta issue to link out to the other issues describing the options under consideration. Please keep the discussions in the appropriate threads.",
      "createdAt": "2025-06-18T22:27:54Z",
      "updatedAt": "2025-06-30T23:21:56Z",
      "closedAt": "2025-06-30T23:21:56Z",
      "comments": [
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "We're going with the option in #24, merged in #27 ",
          "createdAt": "2025-06-30T23:21:56Z",
          "updatedAt": "2025-06-30T23:21:56Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "I_kwDOKv5r-s68QI9U",
      "title": "Change the `resource` param in the token exchange request to identify the RS",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/23",
      "state": "CLOSED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "**Assumptions:**\n\n* Authorization Servers identify Resource Servers with globally unique URIs\n\n**Solution:**\n\nChange the definition of the `resource` parameter to identify the resource server that the final access token will be used at. \n\n```\ngrant_type=urn:ietf:params:oauth:grant-type:token-exchange\n&requested_token_type=urn:ietf:params:oauth:token-type:id-jag\n&resource=https://api.example.com/\n&scope=read\n&subject_token=eyJraWQiOiJzMTZ0cVNtODhwREo4VGZCXzdrSEtQ...\n&subject_token_type=urn:ietf:params:oauth:token-type:id_token\n&client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer\n&client_assertion=eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0...\n```\n\n**Notes:**\n\n* The IdP would need to be able to uniquely identify the resource identifier, and know which authorization server is used by that resource server. The IdP could include both the AS issuer and RS identifier in the ID Assertion JWT.\n* This requires that resource identifiers are globally unique, and the IdP will need to validate that the developer of the app controls the URL, to avoid a random person from using `https://google.com/` as their resource identifier.\n* Not everyone actually uses resource identifiers or has multiple resources under an AS, so it's not clear what value to use in those cases. Just the AS issuer identifier?\n\n",
      "createdAt": "2025-06-18T22:33:17Z",
      "updatedAt": "2025-06-30T23:22:02Z",
      "closedAt": "2025-06-30T23:22:02Z",
      "comments": [
        {
          "author": "mcguinness",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The IdP would need to be able to uniquely identify the resource identifier, and know which authorization server is used by that resource server\n\nIf we assume an ID Assertion Grant only supports a single issuer (aka authorization server) that has 0 or more resources then we could support multiple `resource` params in the request where at least 1 param value must the issuer.  This would address your last point of \"Not everyone actually uses resource identifiers or has multiple resources under an AS, so it's not clear what value to use in those cases. Just the AS issuer identifier?\"\n\n> This requires that resource identifiers are globally unique, and the IdP will need to validate that the developer of the app controls the URL, to avoid a random person from using https://google.com/ as their resource identifier\n\nAgain if we assume a single issuer is supported, then only the issuer's `resource` value would have to be unique. The IdP would resolve additional resources using the issuer as the key. _Note the non-issuer value just needs to be a URI not a URL_\n",
          "createdAt": "2025-06-18T23:19:25Z",
          "updatedAt": "2025-06-18T23:27:33Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Both this approach and #24 have the same challenge with `resource` or `audience` being  \"where the client intends to use the requested security token\".   The ID Assertion Grant is not an access token so it must first be exchanged for an access token but still needs to capture the authorization needed for an access token.     Since we are defining a new token type with its own semantics, I'm OK with this ambiguity as the end-result is authorization the requested resource. ",
          "createdAt": "2025-06-18T23:40:55Z",
          "updatedAt": "2025-06-18T23:40:55Z"
        },
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "The language there indicates \"target service\" which could be a combined application of the authorization server and resource server. The current implemented treats scopes as the scopes used for the eventual resource server token, further blurring the lines.",
          "createdAt": "2025-06-19T22:41:56Z",
          "updatedAt": "2025-06-19T22:41:56Z"
        },
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "> If we assume an ID Assertion Grant only supports a single issuer (aka authorization server) that has 0 or more resources then we could support multiple resource params in the request where at least 1 param value must the issuer. This would address your last point of \"Not everyone actually uses resource identifiers or has multiple resources under an AS, so it's not clear what value to use in those cases. Just the AS issuer identifier?\"\n\nI added this as a new option: #26 ",
          "createdAt": "2025-06-20T21:41:25Z",
          "updatedAt": "2025-06-20T21:41:25Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOKv5r-s68QK1K",
      "title": "Use `audience` to identify the AS and `resource` to identify the RS",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/24",
      "state": "CLOSED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Token Exchange defines `resource` as a URI and `audience` as a string.\n\nWe could use `audience` to identify the AS issuer URL, and `resource` to identify the resource server.\n\n```\nPOST /oauth2/token HTTP/1.1\nHost: acme.idp.example\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=urn:ietf:params:oauth:grant-type:token-exchange\n&requested_token_type=urn:ietf:params:oauth:token-type:id-jag\n&audience=https://auth.example.com/\n&resource=https://acme.chat.example/\n&scope=chat.read+chat.history\n&subject_token=eyJraWQiOiJzMTZ0cVNtODhwREo4VGZCXzdrSEtQ...\n&subject_token_type=urn:ietf:params:oauth:token-type:id_token\n&client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer\n&client_assertion=eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0...\n```\n\n**Notes:**\n\n* This maps most cleanly to Resource Indicators (RFC8707)\n* This slightly violates the meaning of the `audience` and `resource` parameters in Token Exchange, since Token Exchange says that the client is asking for a token usable at all the requested target services.\n* For services that don't have a resource identifier, the `resource` parameter could be omitted without it being weird.",
      "createdAt": "2025-06-18T22:38:29Z",
      "updatedAt": "2025-06-30T23:21:34Z",
      "closedAt": "2025-06-30T23:21:34Z",
      "comments": [
        {
          "author": "panva",
          "authorAssociation": "MEMBER",
          "body": "> This slightly violates the meaning of the audience and resource parameters in Token Exchange, since Token Exchange says that the client is asking for a token usable at all the requested target services.\n\nI believe we could squint a bit here knowing that what Token Exchange issues here is `requested_token_type=urn:ietf:params:oauth:token-type:id-jag`, i.e. not an actual access token.\n\nThe result of this being the following assertion\n\n```\n{\n  \"typ\": \"oauth-id-jag+jwt\"\n}\n.\n{\n  \"jti\": \"9e43f81b64a33f20116179\",\n  \"iss\": \"https://acme.idp.example\",\n  \"sub\": \"U019488227\",\n  \"aud\": \"https://auth.example.com/\",\n  \"resource\": \"https://acme.chat.example/\", // or \"resource\": [\"resource1\", \"resource2\", ...n] when multiple resource parameters are used\n  \"client_id\": \"f53f191f9311af35\",\n  \"exp\": 1311281970,\n  \"iat\": 1311280970,\n  \"scope\": \"chat.read chat.history\"\n}\n.\nsignature\n```\n\nI think this is OK and most expressive of the three #22 linked threads.",
          "createdAt": "2025-06-20T10:23:46Z",
          "updatedAt": "2025-06-20T10:34:30Z"
        },
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "I have a pull request that implements this option in the spec: #27 ",
          "createdAt": "2025-06-26T22:00:18Z",
          "updatedAt": "2025-06-26T22:00:18Z"
        },
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "This should also close https://github.com/aaronpk/draft-parecki-oauth-identity-assertion-authz-grant/issues/20\n",
          "createdAt": "2025-06-26T22:09:18Z",
          "updatedAt": "2025-06-26T22:09:18Z"
        },
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "Added in #27 ",
          "createdAt": "2025-06-30T23:21:34Z",
          "updatedAt": "2025-06-30T23:21:34Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOKv5r-s68QOBE",
      "title": "Include both the AS issuer URL and RS identifier in a single parameter",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/25",
      "state": "CLOSED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "The `audience` value could be a structured value such as:\n\n`audience={\"as\":\"https://login.example.com/\",\"resource\":\"https://chat.example.com/\"}`\n\nA PR for this is in #21\n\n**Notes:**\n\n* For services that don't use resource identifiers, the `resource` value can be left out, however that leaves just one value in the JSON object which looks silly.",
      "createdAt": "2025-06-18T22:45:35Z",
      "updatedAt": "2025-06-30T23:22:08Z",
      "closedAt": "2025-06-30T23:22:08Z",
      "comments": [
        {
          "author": "mcguinness",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am not a fan of this approach.  Using a complex object with special keys that have overlap with other request params is just asking for trouble.   We would be better off modeling this as a RAR request for a token exchange request if we wanted a custom type as this core problem statement is about the IdP authorizing access the resource and issuing a token that contains that authorization.  The RS resource is just part of the authorization just like scopes.",
          "createdAt": "2025-06-18T23:26:31Z",
          "updatedAt": "2025-06-18T23:26:31Z"
        },
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "\n>Using a complex object with special keys that have overlap with other request params \n\n\nI agree with this. Is there anyway to have a JSON POST body, which I guess is a RAR request?",
          "createdAt": "2025-06-19T22:45:35Z",
          "updatedAt": "2025-06-19T22:45:41Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOKv5r-s68nU0Q",
      "title": "Use multiple `resource` parameters, the Authorization Server issuer and one or more Resource Server identifiers",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/26",
      "state": "CLOSED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Token Exchange allows parameters to be repeated, so we could pass multiple `resource` parameters.\n\n```\ngrant_type=urn:ietf:params:oauth:grant-type:token-exchange\n&requested_token_type=urn:ietf:params:oauth:token-type:id-jag\n&resource=https://auth.example.com/\n&resource=https://api.example.com/\n&scope=read\n&subject_token=eyJraWQiOiJzMTZ0cVNtODhwREo4VGZCXzdrSEtQ...\n&subject_token_type=urn:ietf:params:oauth:token-type:id_token\n&client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer\n&client_assertion=eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0...\n```\n\nNotes:\n\n* This is the cleanest option for what to do if there is no Resource Server indicator needed, since the request would contain only one value, the Authorization Server issuer identifier\n* Repeated parameters in form-encoded requests have a bit of a messy history, not every server framework supports them the same way. Some ignore repeated values, some require adding `[]` to indicate repeated values.\n",
      "createdAt": "2025-06-20T21:40:59Z",
      "updatedAt": "2025-06-30T23:22:13Z",
      "closedAt": "2025-06-30T23:22:13Z",
      "comments": []
    },
    {
      "number": 28,
      "id": "I_kwDOKv5r-s69oEQA",
      "title": "Proof-of-Possession Token for Resource App",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/28",
      "state": "OPEN",
      "author": "mcguinness",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ietf-124"
      ],
      "body": "The spec currently isn't clear how a client should meet proof-of-possesion requirements such as DPOP for an ID-JAG for Resource App's Authorization Server token request or the issued token from a Resource App's Authorization Server for a Resource App's Resource Server\n\nOAuth Identity and Authorization Chaining Across Domains has a section on [Delegated Key Binding](https://drafts.oauth.net/oauth-identity-chaining/draft-ietf-oauth-identity-chaining.html#name-delegated-key-binding)\n\nID Assertions currently don't support proof-of-possesion although some folks [have found workarounds](https://github.com/openpubkey/openpubkey)\n\nSince `actor_token` is not used by this profile, we currently don't flow any `cnf` claims into the ID-JAG.  \n\n- Should the client just send a DPoP proof JWT in a DPoP header when making an access token request to the Resource App's Authorization Server?   \n  - A client is currently free to use a different key with each Resource App Authorization Server as there is not binding back to the ID-JAG\n- Should we also support a DPoP proof with ID-JAG? \n  - A client can pass the proof on the token exchange request and we could flow to the ID-JAG and the Resource App Authorization Server could verify the proof. \n\n\n\nI think it should be possible to bind a ID-JAG to a key\n\n\n",
      "createdAt": "2025-06-27T05:18:48Z",
      "updatedAt": "2025-10-07T21:12:34Z",
      "closedAt": null,
      "comments": [
        {
          "author": "panva",
          "authorAssociation": "MEMBER",
          "body": "> I think it should be possible to bind a ID-JAG to a key\n\nI think so too.\n\n- Proof of possession presented during Token Exchange -> ID-JAG gets a `cnf` as per [RFC7800](https://www.rfc-editor.org/rfc/rfc7800.html) _/ [DPoP](https://www.rfc-editor.org/rfc/rfc9449.html). /but there's no indication in the response that binding was done tho (token_type is fixed to N_A), does it matter? I think not, the client can simply do PoP again during ID-JAG exchange/_\n- Proof of possession presented during ID-JAG exchange\n\t- (ID-JAG has cnf) - it must match and tokens get constrained, failure otherwise\n\t- (ID-JAG doesn't have cnf) - tokens get constrained\n- Proof of possession not presented during ID-JAG exchange\n\t- (ID-JAG has cnf) - failure\n\t- (ID-JAG doesn't have cnf) - tokens are not constrained or error (if RS is configured to require constrained tokens)\n\n",
          "createdAt": "2025-06-27T07:44:21Z",
          "updatedAt": "2025-06-27T07:44:21Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "Since the client needs to send the DPoP proof in a header for a token request with sender-constrained ID-JAG for the Resource App's AS, its not clear that the client is also requesting that the issued access token is also sender-constrained.  The DPoP proof is needed to validate the ID-JAG but also indicates desire to key bind the access token with RFC 9449.   \n\nThe simple answer is that if the ID-JAG contains a `cnf` claim then the issued access token is also bound to the same `cnf` when the AS supports issuing sender-constrained access token for the audience.   A client can't use a different key and can't opt-out of sender-constraining an access token for Resource App if they presented a sender-constrained ID-JAG and the Resource App supports sender-constrained access tokens for the Resource Apps' audience.  Thoughts?",
          "createdAt": "2025-07-03T22:08:29Z",
          "updatedAt": "2025-07-03T22:08:29Z"
        },
        {
          "author": "panva",
          "authorAssociation": "MEMBER",
          "body": "It's the AS decision whether to issue a sender-constrained token for a particular RS or not, that depends on the configuration at or discretion of the AS. A client sending a proof of possession to the call is but a prerequisite to the decision process.\n\n> https://www.rfc-editor.org/rfc/rfc9449.html#section-5-9\n> An authorization server MAY elect to issue access tokens that are not DPoP bound, which is signaled to the client with a value of Bearer in the token_type parameter of the access token response\n\nSo to update the earlier post\n\n- Proof of possession presented during Token Exchange -> ID-JAG gets a `cnf` as per [RFC7800](https://www.rfc-editor.org/rfc/rfc7800.html) _/ [DPoP](https://www.rfc-editor.org/rfc/rfc9449.html). /but there's no indication in the response that binding was done tho (token_type is fixed to N_A), does it matter? I think not, the client can simply do PoP again during ID-JAG exchange/_\n- Proof of possession presented during ID-JAG exchange\n\t- (ID-JAG has cnf) - it must match and tokens may get constrained per the RS configuration at the AS, failure otherwise\n\t- (ID-JAG doesn't have cnf) - tokens may get constrained per the RS configuration at the AS\n- Proof of possession not presented during ID-JAG exchange\n\t- (ID-JAG has cnf) - failure\n\t- (ID-JAG doesn't have cnf) - tokens are not constrained or error (if RS configuration at the AS is to require constrained tokens for that RS)",
          "createdAt": "2025-07-04T11:33:46Z",
          "updatedAt": "2025-07-04T11:33:46Z"
        }
      ]
    },
    {
      "number": 29,
      "id": "I_kwDOKv5r-s6-V0CR",
      "title": "Probably need a JWT claims registration for `resource` too...",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/29",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Probably need a JWT claims registration for `resource` too...\r\n\r\n_Originally posted by @bc-pi in https://github.com/aaronpk/draft-parecki-oauth-identity-assertion-authz-grant/pull/27#discussion_r2178259002_\r\n            ",
      "createdAt": "2025-07-01T18:08:23Z",
      "updatedAt": "2025-07-10T17:54:12Z",
      "closedAt": "2025-07-02T02:41:46Z",
      "comments": [
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "Please let me know if I did that right",
          "createdAt": "2025-07-02T02:41:53Z",
          "updatedAt": "2025-07-02T02:41:53Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Please let me know if I did that right\n\nmostly, yes :) I'll do a little PR to fix things up. ",
          "createdAt": "2025-07-10T17:39:32Z",
          "updatedAt": "2025-07-10T17:39:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "please see #32",
          "createdAt": "2025-07-10T17:54:12Z",
          "updatedAt": "2025-07-10T17:54:12Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "I_kwDOKv5r-s6-jnQL",
      "title": "Claim in ID-JAG corresponding to `resource`",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/30",
      "state": "CLOSED",
      "author": "sdesen",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "What claim in the JAG will represent the value sent in `resource` param?",
      "createdAt": "2025-07-02T19:46:59Z",
      "updatedAt": "2025-07-03T14:35:08Z",
      "closedAt": "2025-07-02T20:14:45Z",
      "comments": [
        {
          "author": "panva",
          "authorAssociation": "MEMBER",
          "body": "https://github.com/aaronpk/draft-parecki-oauth-identity-assertion-authz-grant/issues/24#issuecomment-2990814766\n\n```\n{\n  \"typ\": \"oauth-id-jag+jwt\"\n}\n.\n{\n  \"jti\": \"9e43f81b64a33f20116179\",\n  \"iss\": \"https://acme.idp.example\",\n  \"sub\": \"U019488227\",\n  \"aud\": \"https://auth.example.com/\",\n  \"resource\": \"https://acme.chat.example/\", // or \"resource\": [\"resource1\", \"resource2\", ...n] when multiple resource parameters are used\n  \"client_id\": \"f53f191f9311af35\",\n  \"exp\": 1311281970,\n  \"iat\": 1311280970,\n  \"scope\": \"chat.read chat.history\"\n}\n.\nsignature\n``` ",
          "createdAt": "2025-07-02T19:51:52Z",
          "updatedAt": "2025-07-02T19:51:52Z"
        },
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "Ah sorry, totally missed that. I think its because I was looking at the most recently published draft version and not the github repo. TY!",
          "createdAt": "2025-07-02T20:14:43Z",
          "updatedAt": "2025-07-02T20:14:43Z"
        },
        {
          "author": "panva",
          "authorAssociation": "MEMBER",
          "body": "@sdesen it's not explicitly in the ID-JAG description yet but the `resource` claim is now also in the IANA consideration for exactly that purpose. Let's leave the issue open with an action item to describe this better",
          "createdAt": "2025-07-02T20:18:26Z",
          "updatedAt": "2025-07-02T20:18:26Z"
        },
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "Ah, I understand. Thank you. \nIf it gets to that point, and an array is supported, I have some thoughts on the scopes parameter and how it related to the resource indicators.",
          "createdAt": "2025-07-03T14:34:21Z",
          "updatedAt": "2025-07-03T14:35:08Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOKv5r-s6-jn_h",
      "title": "Burst requests",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/31",
      "state": "OPEN",
      "author": "sdesen",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Is there a concern about the bursts of requests, for apps with many integrations, needed to obtain id-jag and their refresh tokens within the lifetime of the id_token? \nAnother option is to use the `offline_access` scope in the OIDC AuthN request, to allow for refreshing of id_tokens, should this spec recommend `offline_access` ?",
      "createdAt": "2025-07-02T19:48:32Z",
      "updatedAt": "2025-07-02T19:48:32Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 33,
      "id": "I_kwDOKv5r-s7A8Qh-",
      "title": "Define error code to indicate the client should *not* fall back to redirect-based OAuth flow",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/33",
      "state": "OPEN",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Once an app is connected through this mechanism, an admin might want to _prevent_ users from going through an interactive OAuth flow entirely.",
      "createdAt": "2025-07-16T18:56:11Z",
      "updatedAt": "2025-07-18T20:30:03Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 34,
      "id": "I_kwDOKv5r-s7BYFUT",
      "title": "Authorization Server Metadata to enable discovery of JWT Assertion Grant",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/34",
      "state": "OPEN",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "A given client currently as no mechanism to discover whether an AS supports `oauth-id-jag+jwt` JWT as a valid JWT bearer grant type (`urn:ietf:params:oauth:grant-type:jwt-bearer`)\n\n(This was split off from #16 to focus on only the Resource App discovery question)",
      "createdAt": "2025-07-18T20:32:39Z",
      "updatedAt": "2025-07-18T20:32:39Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 35,
      "id": "I_kwDOKv5r-s7BYYz-",
      "title": "Refresh tokens",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/35",
      "state": "OPEN",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "ietf-124"
      ],
      "body": "There are two places where refresh tokens might come into the picture:\n\n* The Token Exchange request (use an ID Token to get an ID-JAG)\n* The Access Token request (use an ID-JAG to get an access token)\n\nWe should have some guidance or security considerations around the implications of returning refresh tokens for both of these.\n\n## IDP refresh tokens\n\nThe implication of returning a refresh token along with the ID-JAG is that the requesting application could use the refresh token in place of the ID token in future requests. This could allow the IDP to return new ID-JAGs without a new ID token having been requested.\n\n## Resource App refresh tokens\n\nThe resource app could return a refresh token along with the access token. This pattern should be discouraged, as this enables the client to request access tokens in the future which the IDP wouldn't know about.\n",
      "createdAt": "2025-07-18T21:19:21Z",
      "updatedAt": "2025-10-07T22:05:29Z",
      "closedAt": null,
      "comments": [
        {
          "author": "joshcanhelp",
          "authorAssociation": "NONE",
          "body": "I've had some time to think about this and just wanted to add a few comments and thoughts on this. \n\nFor the first option, **IDP refresh tokens**, there could be a refresh token returned with the initial ID token (green text appended to the diagram on the MCP PR):\n\n<img width=\"927\" height=\"409\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f14802c0-b57a-48e8-bfd8-1f4fd5a926fd\" />\n\nTo refresh the service's access token, the MCP Client (\"Client\" going forward) would:\n\n1. Use the refresh token with the IDP to get a new ID token\n2. Use that ID token with the IDP to get a new ID JAG\n3. ... continues as previously described\n\nThat would allow the IDP to stay in the loop and invalidate the refresh process as needed (admin action, automated protection, etc). That would end up being 3 HTTP requests for a single refresh, though, which is a lot in the case of access tokens with a short life. \n\nFor the second, **Resource App refresh tokens**, you said that the Client could request access tokens that the IDP wouldn't know about but the IDP would know that refresh tokens were allowed. Section 5 (page 8) of the \"Identity Assertion Authorization Grant\" document talks about the token exchange request and includes API scopes as a part of that request.\n\nhttps://datatracker.ietf.org/doc/draft-parecki-oauth-identity-assertion-authz-grant/\n\nThe `offline_access` scope could be requested there and then the IDP would know that refresh tokens are being requested. It could not control the refresh process, of course, so it makes sense to caution about that approach.\n\nThat leads me to a question here in the context of this being applied to 3rd party APIs: how can the IDP be aware of the scopes being requested, `offline_access` or otherwise? I don't see that property mentioned in [your blog post](https://aaronparecki.com/2025/05/12/27/enterprise-ready-mcp) and can't really think of a great way for the IDP to get that knowledge and keep it up to date.\n\nOne thing that came to mind is maybe the 3rd party URL could present a consent screen with all allowed scopes as selectable. Claude can get a text response with an URL and present it to a user and this type of interaction looks like it will be more formalized in the spec going forward (https://github.com/modelcontextprotocol/modelcontextprotocol/pull/887).\n\nThanks again for your work in this space!",
          "createdAt": "2025-07-25T17:27:22Z",
          "updatedAt": "2025-07-25T17:27:22Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "This was resolved in the Identity Chaining Issue https://github.com/oauth-wg/oauth-identity-chaining/pull/151#discussion_r2084222098\n\n1. Client should request `offline_access` scope from IdP and obtain a refresh token\n2. Client should use the IdP refresh token to obtain a new ID Token\n3. Client should use a non-expired ID Token to Token Exchange for an ID-JAG\n4. Client should only obtain an access token from the Resource App Authorization Server. The Resource App AS should never issue a Refresh Token for an ID-JAG\n\nI wanted profiles like ID-JAG to make their own assessment on whether the Resource App AS can issue a Refresh Token (e.g Enterprise has a valid revocation mechanism such as CAEP/SSF) but this was overruled.",
          "createdAt": "2025-07-29T05:07:25Z",
          "updatedAt": "2025-07-29T05:07:25Z"
        },
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "It's a SHOULD not MUST, so we can always say that if there is a way to revoke access like with SSF or similar then it's ok.",
          "createdAt": "2025-07-29T05:11:34Z",
          "updatedAt": "2025-07-29T05:11:34Z"
        },
        {
          "author": "joshcanhelp",
          "authorAssociation": "NONE",
          "body": "@mcguinness - Thank you for that run-through \ud83d\udc4d ",
          "createdAt": "2025-07-30T15:52:55Z",
          "updatedAt": "2025-07-30T15:52:55Z"
        }
      ]
    },
    {
      "number": 36,
      "id": "I_kwDOKv5r-s7B7IJu",
      "title": "Why are public clients optional?",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/36",
      "state": "OPEN",
      "author": "sdesen",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "```\n[8.1. ](https://datatracker.ietf.org/doc/html/draft-parecki-oauth-identity-assertion-authz-grant-05#section-8.1)[Client Authentication](https://datatracker.ietf.org/doc/html/draft-parecki-oauth-identity-assertion-authz-grant-05#name-client-authentication)\nThis specification SHOULD only be supported for confidential clients. Public clients SHOULD redirect the user with an OAuth 2.0 Authorization Request.\n```\n\nWhy SHOULD and not MUST?",
      "createdAt": "2025-07-22T17:28:23Z",
      "updatedAt": "2025-10-01T21:22:57Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mcguinness",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should we consider adding support for ID-JAG as a `response_type` for an authorization request? This would enable public clients to obtain an ID-JAG without needing token exchange.  The constraint around confidential client IIRC was to ensure only the client that was the audience of the `id_token` is the presenter of the assertion in the token exchange request.  \n\nI see value unbundling ID-JAG from token exchange to help standardize ID-JAG as a cross-domain identity assertion so that id_tokens are not used from cross-domain use cases.  \n\nAdditionally there is a draft for [OpenID Connect Key Binding](https://dickhardt.github.io/openid-key-binding/main.html) that would allow us to drop requirement of a confidential client as the client could use DPOP when presenting the id_token instead of client authentication.",
          "createdAt": "2025-10-01T21:22:57Z",
          "updatedAt": "2025-10-01T21:22:57Z"
        }
      ]
    },
    {
      "number": 37,
      "id": "I_kwDOKv5r-s7CJfne",
      "title": "id-jag SHOULD be short-lived",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/37",
      "state": "CLOSED",
      "author": "sdesen",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "A short lived id-jag token mitigates many threats such as token theft and the need to implement token revocation mechanisms, among others (although other mitigations in place such as client auth)\nShould the security considerations or somewhere in the spec specificy that the token should be short lived? Sorry if this was already present and I missed it, or if it will be present in the pending Refresh token updates.",
      "createdAt": "2025-07-23T18:07:45Z",
      "updatedAt": "2025-10-13T19:04:54Z",
      "closedAt": "2025-10-13T19:04:54Z",
      "comments": [
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "This should be covered in https://datatracker.ietf.org/doc/html/draft-ietf-oauth-identity-chaining-05#section-5.5.  Do we need anything specific in this document?",
          "createdAt": "2025-09-09T00:12:40Z",
          "updatedAt": "2025-09-09T00:12:40Z"
        },
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "ID chaining is only mentioned in the introduction so I would probably want that section highlight or added in security concerns. might be too repetitive, but \ud83e\udd37 ",
          "createdAt": "2025-09-09T16:58:28Z",
          "updatedAt": "2025-09-09T16:58:57Z"
        }
      ]
    },
    {
      "number": 38,
      "id": "I_kwDOKv5r-s7KXJD5",
      "title": "IdP metadata recommendation",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/38",
      "state": "OPEN",
      "author": "meghnadubey",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In addition to the new `identity-chaining-requested-token-types-supported` in well-known metadata response, shouldn't the `grant-types-supported` also include `token-exchange`, because that is needed in IdP to support id-token to id-jag token exchange. So, I think support for this grant-type should also be indicated in the IdP metadata.",
      "createdAt": "2025-09-08T17:36:36Z",
      "updatedAt": "2025-09-08T17:38:26Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 39,
      "id": "I_kwDOKv5r-s7Ka1_3",
      "title": "Adopt Tenant Claim from OpenID Enterprise Extensions for ID-JAG",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/39",
      "state": "OPEN",
      "author": "mcguinness",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We currently have the following note about tenants in https://drafts.oauth.net/oauth-identity-assertion-authz-grant/draft-ietf-oauth-identity-assertion-authz-grant.html#section-5.3\n\n> If the IdP is multi-tenant and uses the same issuer for all tenants, the Resource Application will already have IdP-specific logic to determine the tenant from the OpenID Connect ID Token (e.g. a custom hd claim in Google) or SAML assertion, and will need to use that if the IdP also has only one client registration for the Resource Application\n\nWe should consider adopting the `tenant` claim defined in [OpenID Enterprise Extensions](https://openid.net/specs/openid-connect-enterprise-extensions-1_0.html#name-tenant-2) to standardize how the ID-JAG conveys tenant information to a downstream Authorization Server.  This will simplify processing for Resource Application Authorization Servers.\n\n\n",
      "createdAt": "2025-09-08T23:25:28Z",
      "updatedAt": "2025-10-11T14:06:20Z",
      "closedAt": null,
      "comments": [
        {
          "author": "meghnadubey",
          "authorAssociation": "NONE",
          "body": "++1. \nWe should add a claim for conveying tenant or for setting context for the resource AS.",
          "createdAt": "2025-09-09T14:07:32Z",
          "updatedAt": "2025-09-09T14:07:32Z"
        },
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "Am I correct that the two valid values of tenant would be `personal` or `organization`",
          "createdAt": "2025-09-30T14:32:33Z",
          "updatedAt": "2025-09-30T14:32:33Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "or a tenant identifier. those are well known values.  ",
          "createdAt": "2025-09-30T14:35:51Z",
          "updatedAt": "2025-09-30T14:35:51Z"
        },
        {
          "author": "meghnadubey",
          "authorAssociation": "NONE",
          "body": "`tenant id` is the interesting one, since it will convey specific context.",
          "createdAt": "2025-09-30T15:12:07Z",
          "updatedAt": "2025-09-30T15:12:07Z"
        },
        {
          "author": "kamronbatman",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I was under the impression that the client_id would be tenant specific. I suppose it's possible that isn't the case. This would be a distinct issue from the multi-instance issue but both might be able to be solved similarly?",
          "createdAt": "2025-10-11T14:06:19Z",
          "updatedAt": "2025-10-11T14:06:19Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "I_kwDOKv5r-s7Ka5OF",
      "title": "Editorial cleanup to make clear interaction and role of the AS for the Resource App",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/40",
      "state": "OPEN",
      "author": "mcguinness",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The document introduces the term \"Resource App\" which has multiple roles including an Authorization Server role and Protected Resource role.  We should make sure when describing interactions that we clearly identify the OAuth 2.0 roles and are consistent across the document to make sure readers who are familiar with OAuth 2.0 and the many extensions can quickly understand the interactions and minimize use of new terms where possible.",
      "createdAt": "2025-09-08T23:34:45Z",
      "updatedAt": "2025-09-09T14:11:20Z",
      "closedAt": null,
      "comments": [
        {
          "author": "meghnadubey",
          "authorAssociation": "NONE",
          "body": "In addition, we should clearly state any additional metadata that can indicate support for id-jag->access-token exchange in both Authorization Server metadata and Protected Resource metadata on the Resource side.",
          "createdAt": "2025-09-09T14:11:20Z",
          "updatedAt": "2025-09-09T14:11:20Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "I_kwDOKv5r-s7Ka6o3",
      "title": "Clarify ID-JAG is a typed profile of JWT Assertion Grant",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/41",
      "state": "OPEN",
      "author": "mcguinness",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ietf-124"
      ],
      "body": "Document could do a better job of making it clear the delta between an ID-JAG and vanilla JWT Assertion Grant.  It should be clear to a reader that ID-JAG is profiling an JWT Assertion Grant and defining claims and processing instructions for cross-domain access that uses the IdP as the issuer.",
      "createdAt": "2025-09-08T23:40:00Z",
      "updatedAt": "2025-10-07T21:23:30Z",
      "closedAt": null,
      "comments": [
        {
          "author": "meghnadubey",
          "authorAssociation": "NONE",
          "body": "++1.",
          "createdAt": "2025-09-09T14:12:11Z",
          "updatedAt": "2025-09-09T14:12:11Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "I_kwDOKv5r-s7KlAHE",
      "title": "Include more examples of claims in the id-jag",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/43",
      "state": "OPEN",
      "author": "meghnadubey",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Can we include more examples of claims in the id-jag for common but more advanced cases, like multiple resources and scopes for them, even though it conforms to existing standards. Since, this is a new spec, I think documenting use cases will help widen the possibilities for id-jag and convey the effectiveness of id-jag token-exchange.",
      "createdAt": "2025-09-09T14:18:04Z",
      "updatedAt": "2025-09-09T14:18:04Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 44,
      "id": "I_kwDOKv5r-s7Km-R9",
      "title": "SAML support is overly vague",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/44",
      "state": "OPEN",
      "author": "sdesen",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "SAML implementations should include security best practices due to variable nature of NameID\n[Refresh tokens](https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/35) are related because SAML assertions are more short lived than id_tokens, commonly, causing the client to execute all id-jag requests within its lifetime.\nAdditionally it should be clear SAML can only be support for requesting apps, as the resource apps must implement Oauth (maybe that is overly obvious, though)",
      "createdAt": "2025-09-09T16:55:09Z",
      "updatedAt": "2025-09-09T16:55:09Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 45,
      "id": "I_kwDOKv5r-s7KogEj",
      "title": "Clarify that IdP client can be mapped via ID-JAG to AS specific client",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/45",
      "state": "OPEN",
      "author": "mcguinness",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The document doesn't make clear than the IdP can map requesting client for the Token Exchange at the IdP to a different client that is specific to the Resource App's Authorization Server in the issue ID-JAG.  \n\nIt might also make sense to flow the original client as an actor claim\n\n```\n{\n  \"jti\": \"9e43f81b64a33f20116179\",\n  \"iss\": \"https://acme.idp.example\",\n  \"sub\": \"U019488227\",\n  \"aud\": \"https://acme.chat.example/\",\n  \"client_id\": \"client1234@acme.chat.example\",\n  \"exp\": 1311281970,\n  \"iat\": 1311280970,\n  \"scope\": \"chat.read chat.history\",\n  \"act\":\n     {\n       \"iss\":  \"https://acme.idp.example\"\n       \"client_id\": \"f53f191f9311af35\"\n     }\n}\n```",
      "createdAt": "2025-09-09T19:07:23Z",
      "updatedAt": "2025-10-13T17:19:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "I very much agree the document doesn't make this clear. But it also is not opinionated on how the Idp implements this mapping.\n\nWhat value does the resource authz server get from this information in ID-JAG:\n```\n\"act\":\n     {\n       \"iss\":  \"https://acme.idp.example\"\n       \"client_id\": \"f53f191f9311af35\"\n     }\n```\nthat maybe the [potential](https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/39) `tenant` claim would not provide ",
          "createdAt": "2025-09-10T20:32:11Z",
          "updatedAt": "2025-09-10T20:32:11Z"
        },
        {
          "author": "meghnadubey",
          "authorAssociation": "NONE",
          "body": "The one use case I can think of is if the IdP starts supporting client metadata(client id through client metadata), which makes client registration at resource server redundant. The clientId in IdP system probably cannot convey any other info since it is internal to the IdP, and is redundant otherwise.",
          "createdAt": "2025-09-10T20:42:40Z",
          "updatedAt": "2025-09-10T20:42:40Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "This spec needs to exist on its own and not depend on [OAuth Client ID Metadata Document (CIMD)](https://www.ietf.org/archive/id/draft-parecki-oauth-client-id-metadata-document-03.html) .  Since existing deployments don't support CIMD there will be a need for a client to be pre-registered in both the IdP and the Resource App's Authorization Server.  They will most likely have different client identifiers.  I think at a minimum we need to have a callout in security considerations  as the Resource App may want to implement security controls to restrict what clients the IdP can issue ID-JAGs for.  The IDP can assert any client it wants in the ID-JAG which isn't great.  \n\nThe `act` chain claim is valuable for audibility and fine-grained access in the Resource App.  There may be one-to-many relationship between IdP client and Resource App clients. The same Resource App client could use both ID-JAG or classic authorization code grant.   It would be beneficial when correlating security logs across your SaaS apps to know the original actor.  The Resource App could also choose to support FGA where it wants to restrict access based on the original actor and not just the client.  These are are optional but wanted to create a discussion.",
          "createdAt": "2025-09-12T03:13:36Z",
          "updatedAt": "2025-09-12T03:13:36Z"
        },
        {
          "author": "meghnadubey",
          "authorAssociation": "NONE",
          "body": ">  I think at a minimum we need to have a callout in security considerations as the Resource App may want to implement security controls to restrict what clients the IdP can issue ID-JAGs for. \n\nYeah, I can see the value of this.\n",
          "createdAt": "2025-09-12T17:57:29Z",
          "updatedAt": "2025-09-12T17:57:47Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "From mailing list\n\n> Thanks for clarifying! I would be good to add this to 5.1 to make it easier to follow.\n\n> The Resource App will only ever know about one client_id for the Requesting App, the one that was registered at the Resourced App's AS. It's the IdP that needs to be aware of both client_ids. The IdP has a registered client representing its SSO relationship to the Requesting App, and the IdP also needs to know the client_id that the Requesting App uses when talking to the Resource App.",
          "createdAt": "2025-09-24T16:38:18Z",
          "updatedAt": "2025-09-24T16:38:18Z"
        },
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "\n\n| # | Information needed  | Token Exchange Request  |  ID-JAG Claim |  example |   \n|---|---|---|---|---|\n| 1|  Resource AS IssuerURL |  `audience` |   `aud` | `\"https://acme.chat.example/\"`  |   \n| 2|  Protected Resource indicator |  `resource` | `resource`  | `\"https://chat.example/chats\"`  |   \n| 3| Requesting app Client ID at Idp |   `client_id` / `client_assertion` | N/A | `\"af2384u298340\"`  |\n| 4|  Requesting app Client ID at Resource AS | The requesting app knows about this, can it be passed in?  |  `client_id` | `\"client1234@acme.chat.example\"`  |   \n| 5 | Resource app Client ID at Idp |  If the requesting app discovers this, how to pass it in the request?| `act`  |   ```\"act\":{ \"iss\":  \"https://acme.idp.example\", \"client_id\": \"f53f191f9311af35\" }``` |\n| 6 | Requesting app tenant at resource AS multi-tenant issuer |  TBD | `tenant`  |   `enterprise` |\n\n\nThis is my current understanding of the proposal above, I think I misunderstood it before. Is row 5 above the correct intent of the actor claim?\n\nCan the requesting app discover this information from the Idp, and pass it in the request?\n\n\n",
          "createdAt": "2025-10-09T19:50:10Z",
          "updatedAt": "2025-10-09T19:50:10Z"
        },
        {
          "author": "meghnadubey",
          "authorAssociation": "NONE",
          "body": "> #\tInformation needed\tToken Exchange Request\tID-JAG Claim\texample\n> 1\tResource AS IssuerURL\t`audience`\t`aud`\t`\"https://acme.chat.example/\"`\n> 2\tProtected Resource indicator\t`resource`\t`resource`\t`\"https://chat.example/chats\"`\n> 3\tRequesting app Client ID at Idp\t`client_id` / `client_assertion`\tN/A\t`\"af2384u298340\"`\n> 4\tRequesting app Client ID at Resource AS\tThe requesting app knows about this, can it be passed in?\t`client_id`\t`\"client1234@acme.chat.example\"`\n> 5\tResource app Client ID at Idp\tIf the requesting app discovers this, how to pass it in the request?\t`act`\t`\"act\":{ \"iss\": \"https://acme.idp.example\", \"client_id\": \"f53f191f9311af35\" }`\n> 6\tRequesting app tenant at resource AS multi-tenant issuer\tTBD\t`tenant`\t`enterprise`\n> This is my current understanding of the proposal above, I think I misunderstood it before. Is row 5 above the correct intent of the actor claim?\n> \n> Can the requesting app discover this information from the Idp, and pass it in the request?\n\nMy understanding is that the `act` claim has the requesting app client_id@IdP, since that is the actor for the id-jag request. ",
          "createdAt": "2025-10-13T17:19:12Z",
          "updatedAt": "2025-10-13T17:19:12Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "I_kwDOKv5r-s7K1ejk",
      "title": "Add metadata recommendation and example for protected resource",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/46",
      "state": "OPEN",
      "author": "meghnadubey",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "We should add protected resource metadata recommendation and examples/best practices for resource servers.\nAnd particularly emphasize the value of up-to-date `scopes_supported` object in the `.well-known/oauth-protected-resource` response. This can then power the discovery of scopes for IdPs and requesting parties implementing `id-jag`.",
      "createdAt": "2025-09-10T15:58:00Z",
      "updatedAt": "2025-09-10T15:59:08Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 48,
      "id": "I_kwDOKv5r-s7MkGrV",
      "title": "The spec states that `refresh_token` SHOULD NOT be used",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/48",
      "state": "OPEN",
      "author": "meghnadubey",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The spec currently states that, `refresh_token` SHOULD NOT be used. I also saw that there is an old closed issue with the comment:\n> Instead we'll recommend using the refresh token to get a new ID token.\n\nIs that decision final, because I do have some security concerns with using `refresh_token` for an `id-jag` and it also seems to be discouraged by RFC 8693, that states:\n> A refresh token will typically not be issued when the exchange is of one temporary credential (the subject_token) for a different temporary credential (the issued token) for use in some other context.\n\n",
      "createdAt": "2025-09-18T21:29:23Z",
      "updatedAt": "2025-10-14T02:50:58Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "Unfortunately there isn't a great solution for RPs that use SAML for SSO and don't want to migrate over to OIDC (aka that majority of SaaS live today).  They won't be able to obtain new ID-JAGs once the SSO assertion lifetime expires and would need to redirect back on front channel to IdP to get a new SAML Assertion.   Its unclear if this be acceptable from a user experience perspective which is why recommendation is currently `SHOULD NOT`.   ",
          "createdAt": "2025-09-24T16:42:54Z",
          "updatedAt": "2025-09-24T16:42:54Z"
        },
        {
          "author": "meghnadubey",
          "authorAssociation": "NONE",
          "body": "Thank you for providing the background for that decision. That makes sense. ",
          "createdAt": "2025-09-24T17:02:56Z",
          "updatedAt": "2025-09-24T17:02:56Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "Should we consider having clients convert a SAML2 assertion to a IdP-specific refresh token with Token Exchange for client deployments that need to obtain new ID-JAGs when a Resource App's access token expires? \n\n```\nPOST /oauth2/token HTTP/1.1\nHost: acme.idp.example\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=urn:ietf:params:oauth:grant-type:token-exchange\n&subject_token_type=urn:ietf:params:oauth:token-type:saml2\n&subject_token=PHNhbWxwOl...[base64url-encoded SAML2 Assertion]...\n&requested_token_type=urn:ietf:params:oauth:token-type:refresh_token\n&audience=https://acme.idp.example\n&scope=openid%20offline_access\n&client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer\n&client_assertion=eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0...\n```\n\nThe IdP would need a way to map the SAML2 audience entityID to a OAuth2 client to ensure its the same \"RP\".  This would provide a mechanism to slowly migrate a RP over to OIDC even though the initial SSO was SAML.  SSO/AppAdmins don't need change SSO configuration but instead just link the SAML SP to a OAuth Client. \n\nOnce the client obtains the refresh token they can perform a token request and get a new `id_token` and `access_token`.  This simplifies the story going forward as everything is `id_tokens`.",
          "createdAt": "2025-10-14T02:50:58Z",
          "updatedAt": "2025-10-14T02:50:58Z"
        }
      ]
    },
    {
      "number": 49,
      "id": "I_kwDOKv5r-s7PgmaL",
      "title": "Add scope to 6.1 processing rules",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/49",
      "state": "OPEN",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "https://www.ietf.org/archive/id/draft-ietf-oauth-identity-assertion-authz-grant-00.html#section-6.1\n",
      "createdAt": "2025-10-03T14:54:11Z",
      "updatedAt": "2025-10-03T14:54:11Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 51,
      "id": "I_kwDOKv5r-s7QvM5i",
      "title": "Support for Multi-Instance Apps",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/51",
      "state": "OPEN",
      "author": "dlozlla",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "**Summary**\nThis proposal considers a protocol-level solution for scenarios where a user needs to connect to a specific instance (e.g., tenant, organziation, workspace) of a Resource App, particularly when these multiple instances share a common issuer URL. The goal is to create a mechanism that allows a Requesting App to specify the target instance and ensures this choice is communicated end-to-end, so it can be correctly interpreted by both the IdP and the Resource App's authorization server.\n\n**Problem**\nIn many enterprise environments, a single application may offer multiple distinct instances. For example, consider an observability platform with separate instances for `development` and `production` logs. Often, these instances share a single `audience` (i.e., issuer URL) and `resource` identifier for their APIs. In these cases, access to the Resource App's API is managed by a custom claim injected into the `access_token` after the user authenticates with a specific instance.\n\nThe current Identity Assertion Authorization Grant does not define a standard way for a Requesting App to specify a target instance under these conditions. This ambiguity prevents a seamless user experience, which should ideally mirror selecting an application from an SSO dashboard and being directed to the correct instance.\n\nThis overall challenge can be broken down into two parts:\n\n**1. The Discovery Problem** \nBefore a user can make a choice, the Requesting App must first know what choices are available. How can the Requesting App learn which Resource Apps, and their specific instances, the logged-in user is permitted to connect to?\n\nWhile solving discovery is critical for the end-to-end experience, it is handled separately in issue https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/52. For this issue, we will assume the Requesting App has a method to determine which instance the user wants to access.\n\n**2. The Request Problem** \nThis is the focus of the proposal. Once the user has selected an instance, how does the Requesting App communicate this choice to the IdP? The current protocol lacks a standard parameter to differentiate the target instance when it shares an `audience`/issuer URL with others.\n\n**Proposal**\n**We propose using the `client_id` of the target Resource App instance within the IdP** as the unique identifier. This `client_id` would be included in the initial Token Exchange request and the resulting Identity Assertion (ID-JAG).\n\nRationale:\n- Uniqueness & Existing Trust: Each Resource App instance registered with the IdP for SSO already has a unique `client_id`. This identifier is known and trusted by both the IdP and the Resource App.\n- IdP Policy Enforcement: The IdP can use the provided `client_id` to locate and apply the specific authorization policies associated with that instance.\n- Resource App Tenant Mapping: The Resource App's Authorization Server already relies on this `client_id` for its OIDC federation with the IdP. It can therefore use the `client_id` from the assertion to unambiguously map the request to the correct internal tenant, organization, or workspace.\n",
      "createdAt": "2025-10-10T09:15:21Z",
      "updatedAt": "2025-10-14T20:03:30Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "For clarification issuer, resource, and client_id are identical across instances but only tenant is different?  ",
          "createdAt": "2025-10-10T15:25:59Z",
          "updatedAt": "2025-10-10T15:26:49Z"
        },
        {
          "author": "dlozlla",
          "authorAssociation": "NONE",
          "body": "`issuer` and `resource` are identical across (resource app) instances\n`client_id` and tenant are different",
          "createdAt": "2025-10-10T15:40:48Z",
          "updatedAt": "2025-10-10T15:40:48Z"
        },
        {
          "author": "dlozlla",
          "authorAssociation": "NONE",
          "body": "`client_id` is different per instance on the IdP, and it maps to different tenant/workspace/org on the Resource App side",
          "createdAt": "2025-10-10T15:42:18Z",
          "updatedAt": "2025-10-10T15:42:18Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "Would it make sense the requesting app client to create a client assertion actor JWT for the Resource App client and pass as `actor_token` to token exchange?",
          "createdAt": "2025-10-10T16:36:33Z",
          "updatedAt": "2025-10-10T16:36:33Z"
        },
        {
          "author": "dlozlla",
          "authorAssociation": "NONE",
          "body": "The resource app is actually the one exposing the resources and not consuming them, so I think it wouldn\u2019t make sense to do that. IMO it would make more sense to somehow provide additional details on the target `audience` or the `resource` to access. We were debating about using the `tenant` claim, but that seems to really refer to a concept on the IdP rather than on the target audience or resource. ",
          "createdAt": "2025-10-11T12:09:11Z",
          "updatedAt": "2025-10-11T12:09:11Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "Clarifying some assumptions and relationships to open issues first\n \n- There are multi-tenant (e.g. Google) and single-tenant IdPs (e.g Okta) that are the ID-JAG issuer\n- There are multi-tenant and single-tenant RPs that are the ID-JAG audience\n- Both the ID-JAG issuer and audience could support per-tenant clients or global (cross-tenant) clients.  \n\nTenancy is relevant from both an issuer and audience perspective\n\nI opened #39 with intention to adopt `tenant` claim to describe the issuer's tenant for a multi-tenant IdP.  The ID-JAG acts as a cross-domain Identity Assertion so it should assert an identity similar to an id token issued by the IdP for the resource app\n\n[Resource, Audience, and Scope](https://www.rfc-editor.org/rfc/rfc8693#name-relationship-between-resour) are linked as you need all 3 to uniquely identify an authorization delegation for an AS and ensure there isn't a mix-up attack with an ambiguous scope name for example.  These have existing foundation in the security properties of the token request and I don't think we should be trying to overload.  These values should be consistent across OAuth specs and may be discovered with Protected Resource Metadata or Authorization Server metadata for example.\n\nThe ID-JAG audience (the one processing the ID-JAG) is the [Resource App's Authorization Server identifier ](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-rfc7523bis-03#name-updates-to-rfc-7523) and must be unique within the IdP tenant as it functions as the cross-domain identifier to give the IdP context of the cross-domain request while resource+scope is relative to the Resource App's Authorization Server and may not be unique within the IdP tenant.  I think you may be identifying a gap here as that AS may be multi-tenant but the identifier isn't and when used a key there isn't a way to have multiple instances for different tenants.  This would be something like `aud_tenant` similar to `aud_sub` in https://openid.net/specs/openid-connect-enterprise-extensions-1_0.html#name-aud_sub.  Its not clear how the IdP obtains this value and how its bound.\n\nThe ID-JAG presenter is a client that is registered in the Resource App's Authorization Server.  There is currently undefined behavior on how the IdP selects what client in the Resource App Authorization Server the ID-JAG should be used by and can act as the user.  This IdP can assert any client it wants and the Resource App Authorization Server needs to determine what it trusts.  We currently don't require client authentication is required for the ID-JAG token request to the Resource App Authorization Server (its vague).  Providing some security considerations and optionally some processing instructions was the goal of #45.   There is also an open issue to define how to bind the ID-JAG to a key so that the presenter must demonstrate proof of possession #28 .  If we require client authentication or DPOP for the ID-JAG than only a client that knows the secret/key/etc can use the the ID-JAG.  This should help with mix-up attacks/etc.\n\nMy reading of this issue is the following\n\n- The Resource App Authorization Server identifier is multi-tenant (e.g doesn't have tenant in the identifier such `http://as.example.com`)\n- The Resource App Authorization Server has a per-tenant client registration and the client identifier is unique across tenants\n- The protected resource that the client wants to obtain cross-domain access to isn't tenant specific (e.g `https://rs.example.com`)\n\nNot sure if the subject that the ID-JAG asserts resolves to an account in a specific Resource App tenant or not.  Would each environment (e.g development vs production) have a different subject identifier for the user?  What does the IdP put into an ID Token for SSO to these instances?\n\nI think the issue of selecting the client for the ID-JAG might be similar to user as well if there is one to many relationship between the IdP the Resource App tenants and accounts.  An ID-JAG currently doesn't identify a Resource App tenant but rather this handled by processing the Resource App processing the `iss`, `sub`, `tenant` of the identity assertion and the `client_id`.  \n\n\n\n\n\n\n\n\n\n\n",
          "createdAt": "2025-10-11T17:35:15Z",
          "updatedAt": "2025-10-11T17:35:15Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "Since `audience` is a logical name in Token Exchange and doesn't need to be 1:1 to the ID-JAG `aud` claim AFAIK which must be the AS identifier then the cheat code here may be that we just relax the constraint that it must be the AS identifier and if the IdP provides a mechanism to discover other logical names (e.g #52)  or a requesting app has a priori knowledge than they can just pass this value for `audience` in the token exchange request which IdP can use to map a `sub` and `client_id` for the Resource App tenant",
          "createdAt": "2025-10-11T18:19:13Z",
          "updatedAt": "2025-10-11T18:19:36Z"
        },
        {
          "author": "dlozlla",
          "authorAssociation": "NONE",
          "body": "Thanks for the context and the explanation, @mcguinness !\n\nI think your reading of the issue is accurate. The Resource App AS is multi-tenant while the `audience`, `resource` and `client_id` - used by the Requesting App - are unique across tenants. To make things a bit more complex, the same IdP user `sub` can map to multiple of these tenants, but I think you\u2019re spot on in saying that determining the tenant may follow the same procedures that are used to do the same for SSO flows. In those cases, we either:\n\n1.  ask the end user <- this is not an option in this case\n2. receive the id of the tenant in the login request, or \n3. infer it from sort of the \u201caccount\u201d being used on the Resource App AS - we really call them connections and they represent a specific integration with a federated upstream IdP. Several of these accounts may map to the same IdP user but they define a local difference, let\u2019s say a different local user, we can work with.\n\nFocussing on option 3: for normal SSO, each of these \u201caccounts\u201d/connections map to a specific `client_id` on the IdP, that is used to start the login flow from the Resource App AS tenant. It is the `client_id` that would be used to sign in if the user clicks on that specific \u201cResource App instance\u201d (e.g the datadog-dev app instance in our example) on the IdP SSO dashboard. This is precisely the piece of information I think we\u2019re missing and we need to receive in the ID-JAG. It is actually better than configuring the `tenant_id` along with the Resource App instance -that would be equivalent to option 2 - as the IdP naturally knows its own client_ids, so we avoid having to configure any additional attribute on the IdP and instead we encapsulate the logic to determine the tenant within the Resource App AS itself. In summary,  the idea would be to determine the Resource App tenant from the audience + resource-app-instance-client-id@IdP coming in the ID-JAG. If this makes sense, we \u201cjust\u201d have to find the proper element for this client_id to travel within the assertion.\n",
          "createdAt": "2025-10-12T20:47:36Z",
          "updatedAt": "2025-10-12T21:32:43Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "We made the assumption that `iss` + `tenant` + `sub` was enough for the resource app to perform account resolution and identify its local tenant context and account with the ID-JAG just like it would for an ID Token.  If multiple tenants in the resource app trust the same `iss` and  `tenant` and `sub` isn't a pair-wise identifier for the ID Token but rather a `public` identifier (https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes) then I could see the need for an additional claim in the ID-JAG.  \n\nThe simplest name I can think of is `sub_client_id`.  Would love to get @aaronpk thoughts on this.\n\nMight be good to also recommend use of pair-wise identifiers!\n\n-Karl\n\n",
          "createdAt": "2025-10-13T00:10:06Z",
          "updatedAt": "2025-10-13T00:12:11Z"
        },
        {
          "author": "meghnadubey",
          "authorAssociation": "NONE",
          "body": "I think we may be overloading `client_id` too many times. There is the original or primary `client_id`(client_id/client_secret), if used for client authentication@Resource, then there is the proposed `client_id` in the `act` claim to convey the requesting app client_id@IdP, and now the `sub_client_id` for user identification in RS deduced through resource app client_id@IdP. \nMy question is, will the prefix be enough to distinguish between the non-primary client_ids, act_client_id and sub_client_id, or should we come up with enturely different names to identify the purpose of the two non-primary ids. `act` claim is an object so it is a little more clear, so one option is to adopt similar metadata object style for `sub_client_id`.",
          "createdAt": "2025-10-13T16:19:46Z",
          "updatedAt": "2025-10-13T17:16:55Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "The `sub_client_id` isn't part of the actor chain.  Its just part of a complex subject identifier similar to `iss_sub` or something in https://www.rfc-editor.org/rfc/rfc9493 & https://openid.net/specs/openid-sharedsignals-framework-1_0-ID3.html#section-3.3 and needed to resolve a global subject identifier type such as\n\n```\n  \"sub_id\": {\n    \"format\": \"iss_client_sub\",\n    \"iss\": \"https://issuer.example.com\",\n    \"sub\": \"public_identifier\"\n    \"client_id\": \"123\"\n  }\n```\n\nSince this wasn't a Security Event that can describe multiple types of subjects, my suggestion was just to flatten the complex type as `iss` and `sub` are already required claims with existing semantics. '\n\nThe actor chain and the `client_id` in the ID-JWT should describe who is acting as the user.",
          "createdAt": "2025-10-13T17:16:53Z",
          "updatedAt": "2025-10-13T17:16:53Z"
        },
        {
          "author": "dlozlla",
          "authorAssociation": "NONE",
          "body": "Considering the concept we want to capture (the client_id of the target resource app on the IdP) seems to be very specific to cross-app/domain scenarios, rather than using a more generic term, I I wonder if it would be better to be more specific and name the new param `resoruce_app_client_id`?\n\n",
          "createdAt": "2025-10-14T16:15:38Z",
          "updatedAt": "2025-10-14T16:15:38Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "that\u2019s what the `client_id` is. What is unique here is that we need to the SSO client id and not the requesting app client for the resource app which is what folks are used to. It\u2019s tied to the subject and not the requesting app. ",
          "createdAt": "2025-10-14T16:20:30Z",
          "updatedAt": "2025-10-14T16:20:30Z"
        },
        {
          "author": "dlozlla",
          "authorAssociation": "NONE",
          "body": "We can add the prefix _resource_app_, to distinguish it from the client_id (tied to the requesting app). I kind of see how it is tied to the sub, but it is less intuitive to understand as a way to point to a specific resoruce app instance.",
          "createdAt": "2025-10-14T16:39:07Z",
          "updatedAt": "2025-10-14T16:44:54Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "Resource app isn't really an OIDC or OAuth term so I prefer to avoid using that term in claim names.  We are considering revising the document to remove this term as it doesn't appear in any other OIDC or OAuth specs and is a new concept that introduces cognitive complexity to the reader who is coming from either OIDC or OAuth.  Resource app is just a relying party that has an OAuth Client for SSO with an OpenID Provider and also provides an Authorization Server for its protected resources and is in a different trust domain than the client. \n\nWe are basically trying to find a workaround for a tenant identifier for the audience (`aud_tenant`) of the ID-JAG.  Using the client identifier for the RP that was used to account link the subject in the ID Token is a proxy for the `aud_tenant` to enable account resolution.  Since its a proxy, its not perfect for all deployments.  Since the OP doesn't known this value it would require additional administrative configuration and also introduces new security complexity to account linking/resolution when its admin-defined.  Note, this would only be for RPs where the OP doesn't have a connection with SCIM or OP Commands that could obtain an RP specific identifier for the account or tenant.\n\nLooking over to our friend SAML, they did define the concept of `SPNameQualifier` which help scopes the Subject `NameID` \n\n```\nSPNameQualifier [Optional]\nFurther qualifies a name with the name of a service provider or affiliation of providers. This\nattribute provides an additional means to federate names on the basis of the relying party or\nparties.\n```\n\nThis effectively enables \"tenant\" like scenarios in SAML subjects.  This is what I was after with `sub_client_id` as way to qualify the subject identifier.  If `tenant` is too strong a term and we want a more generic concept then we could take inspiration from SAML and have `aud_sub_qualifier` or something (note: `aud_sub` is a claim in [OIDC Enterprise Extensions](https://openid.net/specs/openid-connect-enterprise-extensions-1_0.html#name-aud_sub)).  Not sure if this any better IMHO than `sub_client_id` but curious what others think.\n",
          "createdAt": "2025-10-14T17:33:06Z",
          "updatedAt": "2025-10-14T18:26:49Z"
        },
        {
          "author": "dlozlla",
          "authorAssociation": "NONE",
          "body": "Thanks for the context. Now I understand better.\n\nI think you touch an interesting point which is the fact that sending the resource app client_id is really a proxy to determine the tenant. Actually, in some cases where the IdP and the Resource App AS have a closer, automated provisioning, it would be \u201ceasy\u201d to know (obtain) the `tenant_id` at the the IdP. Therefore,  perhaps it would be a good idea to have an `aud_sub_qualifier`, as an object that can convey different attributes, like the resource app `client_id` - which could be added always - and the `tenant_id` at the resource app AS, added when that is known to the IdP\u2026.??",
          "createdAt": "2025-10-14T20:03:30Z",
          "updatedAt": "2025-10-14T20:03:30Z"
        }
      ]
    },
    {
      "number": 52,
      "id": "I_kwDOKv5r-s7QvSeo",
      "title": "Discovering allowed Resource App (instances) for the logged in user",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/52",
      "state": "OPEN",
      "author": "dlozlla",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "As raised in issue https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/51, a seamless user experience requires that Requesting Apps have a way to discover which applications, and their specific instances, a user is allowed to access. This would allow mirroring the experience of SSO dashboards, where users can simply select the app instance they want to use.\n\nThis raises several questions:\n- Should the IdP expose an \"Accessible Resources API\" to list the available Resource Apps and their instances for an authenticated user?\n- How should such an API structure its data to clearly differentiate between multiple instances of the same application?\n- **Should this API be standardized?**",
      "createdAt": "2025-10-10T09:22:45Z",
      "updatedAt": "2025-10-14T02:55:15Z",
      "closedAt": null,
      "comments": [
        {
          "author": "meghnadubey",
          "authorAssociation": "NONE",
          "body": "While the need for this API may be generic, the schema will be specific to the particular IdP implementation of IdAssertion Authz Grant setup and will be difficult to standardize. \nThe API for any IdP will depend on how it is facilitating the setting up of secure \"virtual connection\" between requesting instances and resource instances, for the IT Admin. So this API is basically a form of get connections API that supports intuitive search for  a particular app, and most likely this API schema in some form will be part of any IdP implementation. \nWe can definitely set up a recommendation, but I'm skeptical upon the practicality of standardizing it. ",
          "createdAt": "2025-10-10T15:15:15Z",
          "updatedAt": "2025-10-10T15:15:15Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this would be a better fit for a new OIDC defined protected resource to complement `/userinfo` for an OP to publish the SSO apps and resources for a user than something this spec should define.  This would be be similar to something like https://developer.okta.com/docs/api/openapi/okta-myaccount/myaccount/tag/OktaApplications/#tag/OktaApplications/operation/listOktaApplications or https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UserResources/#tag/UserResources/operation/listAppLinks that enables a client to dynamically construct a SSO dashboards/etc.   I would not expect this any OAuth specs.  \n\nThe connect-ab working group would be a good place to signal from other OIDC providers if this is valuable",
          "createdAt": "2025-10-10T15:24:09Z",
          "updatedAt": "2025-10-10T15:24:09Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "Ignoring SAML, is this in the right direction of what an OP should provide?\n\n```http\nGET /sso/trusted_clients\nHost: idp.example\nAuthorization: Bearer <access_token>\n\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n      \"client_id\": \"123\",\n      \"client_name\": \"Wiki SaaS App\",\n      \"client_uri\": \"https://app.wiki.example\",\n      \"logo_uri\": \"https://app.wiki.example\",\n      \"initiate_login_uri\": \"https://idp.example/launch/123\"\n  }\n]\n```\n\n\n```http\nGET /sso/trusted_authorization_servers\nHost: idp.example\nAuthorization: Bearer <access_token>\n\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n      \"authorization_server_id\": \"https://as.chat.example\",\n      \"authorization_server_name\": \"Chat Authorization Server\",\n      \"client_id\": \"example.wiki.app\"\n      \"resources\": [\n          {\n              \"resource_id\": \"https://api.chat.example\",\n              \"resource_name\": \"Chat API\"\n              \"scopes_supported\": [\n                  \"api:read\",\n                  \"api:write\"\n              ]\n          }\n      ]\n  }\n]\n```",
          "createdAt": "2025-10-13T04:42:19Z",
          "updatedAt": "2025-10-13T04:42:19Z"
        },
        {
          "author": "meghnadubey",
          "authorAssociation": "NONE",
          "body": "> Ignoring SAML, is this in the right direction of what an OP should provide?\n> \n> GET /sso/trusted_clients\n> Host: idp.example\n> Authorization: Bearer <access_token>\n> \n> HTTP/1.1 200 OK\n> Content-Type: application/json\n> \n> [\n>   {\n>       \"client_id\": \"123\",\n>       \"client_name\": \"Wiki SaaS App\",\n>       \"client_uri\": \"https://app.wiki.example\",\n>       \"logo_uri\": \"https://app.wiki.example\",\n>       \"initiate_login_uri\": \"https://idp.example/launch/123\"\n>   }\n> ]\n> GET /sso/trusted_authorization_servers\n> Host: idp.example\n> Authorization: Bearer <access_token>\n> \n> HTTP/1.1 200 OK\n> Content-Type: application/json\n> \n> [\n>   {\n>       \"authorization_server_id\": \"https://as.chat.example\",\n>       \"authorization_server_name\": \"Chat Authorization Server\",\n>       \"client_id\": \"example.wiki.app\"\n>       \"resources\": [\n>           {\n>               \"resource_id\": \"https://api.chat.example\",\n>               \"resource_name\": \"Chat API\"\n>               \"scopes_supported\": [\n>                   \"api:read\",\n>                   \"api:write\"\n>               ]\n>           }\n>       ]\n>   }\n> ]\n\nThis seems like a good starting point for `id_assertion_authorization_provider_metadata` discovery. The two endpoints provide a list of available clients, and a list of available  resources for these clients.  The latter can support multiple resource_ids for the same authz_server_id, and possibly other interesting metadata about the resource such as domain(environment) which can hep distinguish between these resource_ids, since scope may overlap.",
          "createdAt": "2025-10-13T17:28:25Z",
          "updatedAt": "2025-10-13T17:28:25Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "My thoughts for SAML was that it would solve a lot of problems and simplify things if the requesting app converted the SAML Assertion to a Refresh Token and obtained an `id_token` and `access_token` (see https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/48#issuecomment-3399917001).  \n\nThe client could then use the access token to discover OAuth/OIDC OP metadata such as the example above.",
          "createdAt": "2025-10-13T17:46:56Z",
          "updatedAt": "2025-10-14T02:55:15Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "I_kwDOKv5r-s7RR_2f",
      "title": "recommendation on https for audience param?",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/53",
      "state": "OPEN",
      "author": "sdesen",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Is there a spec-level recommendation to _enforce_ `https` for the `audience` which represents the Resource App Authz Issuerurl?\n\nThe Idp will authorize ID-JAGs to be used at this endpoint, so with the exception of localhost, etc, perhaps this should be a security recommendation if not already via Oauth.\n\nPerhaps this is a few layers deep in RFCs. cc @meghnadubey",
      "createdAt": "2025-10-13T19:02:38Z",
      "updatedAt": "2025-10-14T03:31:45Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "We have it currently defined as the AS issuer identifier which maps to https://www.rfc-editor.org/rfc/rfc8414#section-2 which says `https`.  \n\nIf we end up relaxing this per https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/issues/51#issuecomment-3393564904 then we may need additional guidance",
          "createdAt": "2025-10-14T03:31:45Z",
          "updatedAt": "2025-10-14T03:31:45Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOKv5r-s5odQGI",
      "title": "consistent oauth-itag+jwt",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/pull/1",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "while thinking about how to comment on https://github.com/oauth-wg/oauth-identity-chaining/issues/85 I came to look at what you were doing with typ in this draft and noticed three different media type values...",
      "createdAt": "2024-03-01T22:24:35Z",
      "updatedAt": "2024-03-02T01:07:21Z",
      "baseRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "baseRefName": "main",
      "baseRefOid": "4e997cd8520282b5318a48b4025c210d8587d78e",
      "headRepository": "bc-pi/draft-parecki-oauth-identity-assertion-authorization-grant",
      "headRefName": "patch-1",
      "headRefOid": "4d012ec7b9885b314cdd8e0115ed196e1fec26ac",
      "closedAt": "2024-03-01T22:29:06Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "haha thanks i'm in the middle of fixing it \ud83d\ude43 ",
          "createdAt": "2024-03-01T22:25:21Z",
          "updatedAt": "2024-03-01T22:25:21Z"
        },
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "I fixed it up here, thanks https://github.com/aaronpk/draft-parecki-oauth-identity-assertion-authorization-grant/commit/bd15902dc052e0dea3b4483327ebbae84b72d4fa",
          "createdAt": "2024-03-01T22:29:07Z",
          "updatedAt": "2024-03-01T22:29:07Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "That works! Glad I could be (un)helpful. ",
          "createdAt": "2024-03-01T22:31:13Z",
          "updatedAt": "2024-03-01T22:31:13Z"
        },
        {
          "author": "kamronbatman",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You caught us in the middle \ud83d\ude04! Thanks @aaronpk for getting that updated.",
          "createdAt": "2024-03-01T22:32:12Z",
          "updatedAt": "2024-03-02T01:07:21Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 2,
      "id": "PR_kwDOKv5r-s5odT4C",
      "title": "Fix grammar in intro",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/pull/2",
      "state": "CLOSED",
      "author": "kamronbatman",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-01T22:41:53Z",
      "updatedAt": "2024-03-01T23:16:26Z",
      "baseRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "baseRefName": "main",
      "baseRefOid": "bd15902dc052e0dea3b4483327ebbae84b72d4fa",
      "headRepository": "kamronbatman/draft-parecki-oauth-identity-assertion-authorization-grant",
      "headRefName": "patch-1",
      "headRefOid": "d270099ed9e06f9f7c47ce70956e0c673c92c119",
      "closedAt": "2024-03-01T23:16:26Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "I changed too much and this conflicted. I fixed it in a separate commit!",
          "createdAt": "2024-03-01T23:16:26Z",
          "updatedAt": "2024-03-01T23:16:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKv5r-s5x-dmz",
          "commit": {
            "abbreviatedOid": "d270099"
          },
          "author": "macyabbey",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-01T22:45:50Z",
          "updatedAt": "2024-03-01T22:45:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOKv5r-s5qLOn0",
      "title": "Update draft-parecki-oauth-identity-assertion-authz-grant.md",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/pull/5",
      "state": "MERGED",
      "author": "gffletch",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Text to address issue #4\r\n\r\nThis needs careful review and may go to far or be too detailed for the Overview section.\r\n\r\nFeedback appreciated!",
      "createdAt": "2024-03-20T04:57:36Z",
      "updatedAt": "2024-06-11T19:12:24Z",
      "baseRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "baseRefName": "main",
      "baseRefOid": "e806cbecb993c6ee9a6bab1678cf2aa278a3e3b1",
      "headRepository": "gffletch/draft-parecki-oauth-identity-assertion-authz-grant",
      "headRefName": "Issue_4",
      "headRefOid": "25f15eba488626f3971ab3d1500f5332e960ca19",
      "closedAt": "2024-06-11T19:12:24Z",
      "mergedAt": "2024-06-11T19:12:24Z",
      "mergedBy": "aaronpk",
      "mergeCommit": {
        "oid": "932f96951616edea3d015ee30c47ad93e43277cc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKv5r-s59pnzW",
          "commit": {
            "abbreviatedOid": "25f15eb"
          },
          "author": "sdesen",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "> the IDP is trusted to ensure the scopes identified in the ID-JAG have been correctly authorized before issuing the ID-JAG token\r\n\r\nHow the IDP ensures the scopes may vary, for instance, in section A.1.1 there is no mention of how the IDP should be aware of the scopes Resource Application's allowed scopes for this exchange.\r\n\r\nSo although this is a true statement, I might suggest adding that Resource Application Authorization Servers _may_ also validate the JAG scopes against its own policies in section 6.1 of this draft. Curious on other's thoughts there.\r\n\r\n",
          "createdAt": "2024-06-10T15:01:50Z",
          "updatedAt": "2024-06-10T15:01:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOKv5r-s5yJAM5",
      "title": "Update for changes to SAML implementation",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/pull/11",
      "state": "MERGED",
      "author": "sdesen",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Address #10 \r\n\r\nMaybe section \"Relationship to RFC7522\" should be removed but I believe we still add an extra secure step as described in the section, so opt to keep it in.\r\n\r\nThe new SAML section added in this PR is an idea for mentioning the SAML implementation. I am not sure how the authors want to approach this which is why this is a draft PR for now.",
      "createdAt": "2024-06-11T17:39:41Z",
      "updatedAt": "2024-06-30T14:54:27Z",
      "baseRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "baseRefName": "main",
      "baseRefOid": "e806cbecb993c6ee9a6bab1678cf2aa278a3e3b1",
      "headRepository": "sdesen/draft-parecki-oauth-identity-assertion-authz-grant",
      "headRefName": "Issue_10",
      "headRefOid": "1945666640c9acd1c9a909f12ee825ed162d1286",
      "closedAt": "2024-06-11T19:05:20Z",
      "mergedAt": "2024-06-11T19:05:20Z",
      "mergedBy": "aaronpk",
      "mergeCommit": {
        "oid": "e4034b48067d8a063efa1e128cb2d3161f8d7267"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 15,
      "id": "PR_kwDOKv5r-s6Sy-Z7",
      "title": "Added example for an AI Agent based flow",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/pull/15",
      "state": "MERGED",
      "author": "mcguinness",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Initial draft for an AI Agent based flow (e.g MCP)",
      "createdAt": "2025-04-16T08:03:46Z",
      "updatedAt": "2025-04-22T22:13:55Z",
      "baseRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "baseRefName": "main",
      "baseRefOid": "afd78c007d3705cd7a0fa7cb87f35aded3944e87",
      "headRepository": "mcguinness/draft-parecki-oauth-identity-assertion-authz-grant",
      "headRefName": "agent-example",
      "headRefOid": "69817ee846a54f7af7ca77b18dc6576693e8f219",
      "closedAt": "2025-04-22T22:13:55Z",
      "mergedAt": "2025-04-22T22:13:55Z",
      "mergedBy": "aaronpk",
      "mergeCommit": {
        "oid": "5a1192fbc54f2e563359b8242a2acf1810846794"
      },
      "comments": [
        {
          "author": "kamronbatman",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is great, thank you @mcguinness! I am so happy to see you are still active with this spec! I would love to get a debrief on any updates regarding MCP, especially on how it pertains to enterprise, idp, and this spec.",
          "createdAt": "2025-04-22T18:15:17Z",
          "updatedAt": "2025-04-22T18:16:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKv5r-s6mAU5G",
          "commit": {
            "abbreviatedOid": "b6e821a"
          },
          "author": "sdesen",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-22T19:16:18Z",
          "updatedAt": "2025-04-22T19:16:19Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "Should this be a different client id for illustrative purposes?",
              "createdAt": "2025-04-22T19:16:19Z",
              "updatedAt": "2025-04-22T19:16:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKv5r-s6mBxod",
          "commit": {
            "abbreviatedOid": "b6e821a"
          },
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-22T21:59:01Z",
          "updatedAt": "2025-04-22T21:59:02Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n  RFC8414:\r\n```",
              "createdAt": "2025-04-22T21:59:01Z",
              "updatedAt": "2025-04-22T21:59:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKv5r-s6mB1kX",
          "commit": {
            "abbreviatedOid": "69817ee"
          },
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-22T22:11:08Z",
          "updatedAt": "2025-04-22T22:11:08Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "I do think that would be helpful, I'll change one of them",
              "createdAt": "2025-04-22T22:11:08Z",
              "updatedAt": "2025-04-22T22:11:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKv5r-s6mB18s",
          "commit": {
            "abbreviatedOid": "69817ee"
          },
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-22T22:11:43Z",
          "updatedAt": "2025-04-22T22:11:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 18,
      "id": "PR_kwDOKv5r-s6UyJnQ",
      "title": "Standardizes agent.read scope syntax",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/pull/18",
      "state": "MERGED",
      "author": "kamronbatman",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-05-02T18:21:30Z",
      "updatedAt": "2025-05-22T14:55:45Z",
      "baseRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "baseRefName": "main",
      "baseRefOid": "b6b8d60624dd9c28d704a7a91e5c4c3ce121e675",
      "headRepository": "kamronbatman/draft-parecki-oauth-identity-assertion-authorization-grant",
      "headRefName": "patch-2",
      "headRefOid": "7553500be6b0d55f55f6067907eb7e81ba8c3b82",
      "closedAt": "2025-05-22T14:45:55Z",
      "mergedAt": "2025-05-22T14:45:55Z",
      "mergedBy": "aaronpk",
      "mergeCommit": {
        "oid": "eab870d1f256bcbdbe4071500bb4166a65ec253e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKv5r-s6nqdDw",
          "commit": {
            "abbreviatedOid": "ff2336e"
          },
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-02T21:20:10Z",
          "updatedAt": "2025-05-02T21:20:11Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n    &scope=agent.read+agent.write\r\n```\r\n\r\nThe + is here because it represents a URL-encoded space",
              "createdAt": "2025-05-02T21:20:10Z",
              "updatedAt": "2025-05-02T21:20:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKv5r-s6nqdRK",
          "commit": {
            "abbreviatedOid": "ff2336e"
          },
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-02T21:20:55Z",
          "updatedAt": "2025-05-02T21:20:55Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "You're right that this one should be a space though.",
              "createdAt": "2025-05-02T21:20:55Z",
              "updatedAt": "2025-05-02T21:20:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKv5r-s6nra0x",
          "commit": {
            "abbreviatedOid": "ff2336e"
          },
          "author": "kamronbatman",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-03T07:24:36Z",
          "updatedAt": "2025-05-03T07:24:37Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yeah this is part of query params, so that makes sense.",
              "createdAt": "2025-05-03T07:24:37Z",
              "updatedAt": "2025-05-03T07:24:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKv5r-s6qj6Mp",
          "commit": {
            "abbreviatedOid": "7553500"
          },
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-22T14:45:48Z",
          "updatedAt": "2025-05-22T14:45:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOKv5r-s6bJcXw",
      "title": "use multi-part audience instead of resource in token exchange",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/pull/21",
      "state": "CLOSED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-06-18T21:29:17Z",
      "updatedAt": "2025-06-30T23:19:43Z",
      "baseRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "baseRefName": "main",
      "baseRefOid": "9a3af61be3101b3422c5f5844eb45607f0c9f987",
      "headRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "headRefName": "audience",
      "headRefOid": "4bbc0729ceee46dc5ab423f03c703ace2601cf73",
      "closedAt": "2025-06-30T23:19:42Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "Closing in favor of #27 ",
          "createdAt": "2025-06-30T23:19:42Z",
          "updatedAt": "2025-06-30T23:19:42Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 27,
      "id": "PR_kwDOKv5r-s6cT3tt",
      "title": "use both `audience` and `resource` to identify the resource application",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/pull/27",
      "state": "MERGED",
      "author": "aaronpk",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "this implements the change described in #24\r\n\r\n* `audience` identifies the authorization server and is required\r\n* `resource` identifies the resource server and is optional",
      "createdAt": "2025-06-26T21:59:46Z",
      "updatedAt": "2025-07-01T18:08:13Z",
      "baseRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "baseRefName": "main",
      "baseRefOid": "5be151b152692b48c3390d512ed7ea3c298bd7ff",
      "headRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "headRefName": "resource-audience",
      "headRefOid": "8e82dcf1f0e936f37d3551bba0e343d64e3b573e",
      "closedAt": "2025-06-30T23:20:57Z",
      "mergedAt": "2025-06-30T23:20:57Z",
      "mergedBy": "aaronpk",
      "mergeCommit": {
        "oid": "0cf60b46bc5061f6fe7689b45d69a9b1d2412ba3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKv5r-s6wqJ9s",
          "commit": {
            "abbreviatedOid": "16ad824"
          },
          "author": "sdesen",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-26T22:06:10Z",
          "updatedAt": "2025-06-26T22:06:10Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "No mention for 8707?",
              "createdAt": "2025-06-26T22:06:10Z",
              "updatedAt": "2025-06-26T22:16:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKv5r-s6wqKkE",
          "commit": {
            "abbreviatedOid": "16ad824"
          },
          "author": "sdesen",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-26T22:07:43Z",
          "updatedAt": "2025-06-26T22:07:44Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Not sure how an array would work for scopes. \r\nE.g. unless each api uses the same scopes, or all scopes for each api are included in request? should there be clarity there",
              "createdAt": "2025-06-26T22:07:44Z",
              "updatedAt": "2025-06-26T22:07:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKv5r-s6wu1YK",
          "commit": {
            "abbreviatedOid": "16ad824"
          },
          "author": "panva",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-27T07:17:20Z",
          "updatedAt": "2025-06-27T07:17:20Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "The semantics of multiple resource indicators and their relation to the scope parameter is the same as at the authorization endpoint for a given AS. The only thing that's different here is the encoding, we're used to seeing these as `application/x-www-form-urlencoded` in which case `resource` can appear multiple times, but when encoded as `application/json` we expect an array (much like if it was part of a JAR Request Object).",
              "createdAt": "2025-06-27T07:17:20Z",
              "updatedAt": "2025-06-27T07:17:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKv5r-s6w2N5Q",
          "commit": {
            "abbreviatedOid": "16ad824"
          },
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-27T15:28:00Z",
          "updatedAt": "2025-06-27T15:28:00Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "yeah, there is no pairing between resource indicators and scopes in a regular authorization request, and that isn't changing with the addition of this parameter here either. Basically it's undefined in both places.",
              "createdAt": "2025-06-27T15:28:00Z",
              "updatedAt": "2025-06-27T15:28:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKv5r-s6w3xEK",
          "commit": {
            "abbreviatedOid": "8e82dcf"
          },
          "author": "panva",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-27T17:46:50Z",
          "updatedAt": "2025-06-27T17:46:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKv5r-s6xaeyx",
          "commit": {
            "abbreviatedOid": "8e82dcf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-01T18:08:12Z",
          "updatedAt": "2025-07-01T18:08:13Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Probably need a JWT claims registration for `resource` too... ",
              "createdAt": "2025-07-01T18:08:13Z",
              "updatedAt": "2025-07-01T18:08:13Z"
            }
          ]
        }
      ]
    },
    {
      "number": 32,
      "id": "PR_kwDOKv5r-s6eWers",
      "title": "tidy up the IANA section and references ",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/pull/32",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-07-10T17:47:30Z",
      "updatedAt": "2025-07-10T17:59:59Z",
      "baseRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "baseRefName": "main",
      "baseRefOid": "b20976d12d72a61aba5d97607289682d59262752",
      "headRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "headRefName": "iana-tidy-up",
      "headRefOid": "89c7390fd7f71dbf1b0960e1eb945b3101a108d8",
      "closedAt": "2025-07-10T17:59:52Z",
      "mergedAt": "2025-07-10T17:59:52Z",
      "mergedBy": "aaronpk",
      "mergeCommit": {
        "oid": "e090202a69539bdd480404ed4078b27a3e951d43"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "note \r\nhttps://drafts.aaronpk.com/draft-parecki-oauth-identity-assertion-authz-grant/iana-tidy-up/draft-parecki-oauth-identity-assertion-authz-grant.html#name-normative-references \r\n\r\nvs \r\n\r\nhttps://www.ietf.org/archive/id/draft-parecki-oauth-identity-assertion-authz-grant-05.html#section-10.1",
          "createdAt": "2025-07-10T17:49:56Z",
          "updatedAt": "2025-07-10T17:49:56Z"
        },
        {
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "body": "thank you!",
          "createdAt": "2025-07-10T17:59:59Z",
          "updatedAt": "2025-07-10T17:59:59Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 42,
      "id": "PR_kwDOKv5r-s6nfBcK",
      "title": "Improve security consideration clarity for public clients",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/pull/42",
      "state": "OPEN",
      "author": "mcguinness",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Make clear that public clients need to fallback to existing authorization code flow to Resource App to obtain user consent interactively",
      "createdAt": "2025-09-09T00:01:32Z",
      "updatedAt": "2025-10-11T14:10:26Z",
      "baseRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "baseRefName": "main",
      "baseRefOid": "52f8cb056d43fe732fadec55ad578685885fe504",
      "headRepository": "mcguinness/draft-parecki-oauth-identity-assertion-authz-grant",
      "headRefName": "patch-1",
      "headRefOid": "2d99efead162c3b2dca5179d89a3153ea2215f28",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "sdesen",
          "authorAssociation": "NONE",
          "body": "Does this mean public clients should obtain user consent via authz_code, and then subsequently pickup this flow and make a call to the IdP? Wouldn't the authz_code flow already provide a token?",
          "createdAt": "2025-10-01T18:30:27Z",
          "updatedAt": "2025-10-01T18:30:27Z"
        },
        {
          "author": "mcguinness",
          "authorAssociation": "COLLABORATOR",
          "body": "This was response to mailing list feedback \r\n\r\n> > 8.1 Client Authentication\r\n> > This specification SHOULD only be supported for confidential clients. Public clients SHOULD redirect the user with an OAuth 2.0 Authorization Request.\r\n> \r\n> Which AS are the public clients redirecting the user? How would this work? If this works, then why are needing this specification?\r\n\r\nMy attempt with the PR was to help reader understand that public client can't currently use token exchange to obtain an ID-JAG and must fall back to what they do today and redirect user to the Resource App AS to get an authorization code.  \r\n\r\nRelated is #36   ",
          "createdAt": "2025-10-01T21:22:30Z",
          "updatedAt": "2025-10-01T21:24:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKv5r-s7GUZjh",
          "commit": {
            "abbreviatedOid": "2d99efe"
          },
          "author": "kamronbatman",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-10-11T14:10:26Z",
          "updatedAt": "2025-10-11T14:10:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 47,
      "id": "PR_kwDOKv5r-s6oxq70",
      "title": "Wrong Git Link and Typos",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/pull/47",
      "state": "MERGED",
      "author": "WhippsP",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Updates to point to correct GIT URL and updated some typos.",
      "createdAt": "2025-09-16T06:10:15Z",
      "updatedAt": "2025-09-22T21:42:48Z",
      "baseRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "baseRefName": "main",
      "baseRefOid": "52f8cb056d43fe732fadec55ad578685885fe504",
      "headRepository": "WhippsP/oauth-identity-assertion-authz-grant",
      "headRefName": "main",
      "headRefOid": "c7004f79eb76e84b4f54a73fc25bf04be7527293",
      "closedAt": "2025-09-22T21:42:48Z",
      "mergedAt": "2025-09-22T21:42:48Z",
      "mergedBy": "aaronpk",
      "mergeCommit": {
        "oid": "600bba0cdd30d88e22ba8abd8727e1269d9c98e0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKv5r-s7CB5l4",
          "commit": {
            "abbreviatedOid": "c7004f7"
          },
          "author": "aaronpk",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-22T21:40:36Z",
          "updatedAt": "2025-09-22T21:40:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 50,
      "id": "PR_kwDOKv5r-s6s90ru",
      "title": "Attempt at issue #49",
      "url": "https://github.com/oauth-wg/oauth-identity-assertion-authz-grant/pull/50",
      "state": "OPEN",
      "author": "sdesen",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "#49 ",
      "createdAt": "2025-10-09T20:06:22Z",
      "updatedAt": "2025-10-10T21:21:01Z",
      "baseRepository": "oauth-wg/oauth-identity-assertion-authz-grant",
      "baseRefName": "main",
      "baseRefOid": "104557b1d7a193627b378af392fda7184b86bcca",
      "headRepository": "sdesen/draft-parecki-oauth-identity-assertion-authz-grant",
      "headRefName": "main",
      "headRefOid": "ab2db1b023914ee1cdcdb3c653f3f8f173cbecae",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    }
  ]
}